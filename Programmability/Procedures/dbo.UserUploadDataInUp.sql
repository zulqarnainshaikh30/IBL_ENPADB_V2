SET QUOTED_IDENTIFIER, ANSI_NULLS ON
GO


--USE YES_MISDB
CREATE PROCEDURE  [dbo].[UserUploadDataInUp]
	@Timekey INT,
	@XmlData XML='' ,
	@LoginPassword Varchar(max)='',
	@UserLoginID VARCHAR(100),
	@OperationFlag INT,
	@MenuId INT,
	@AuthMode	CHAR(1),
	@filepath VARCHAR(MAX),
	@EffectiveFromTimeKey INT,
	@EffectiveToTimeKey	INT,
    @Result		INT=0 OUTPUT,
	@UniqueUploadID INT
	--@Authlevel varchar(5)

AS

--DECLARE @Timekey INT=24928,
--	@UserLoginID VARCHAR(100)='FNAOPERATOR',
--	@OperationFlag INT=1,
--	@MenuId INT=163,
--	@AuthMode	CHAR(1)='N',
--	@filepath VARCHAR(MAX)='',
--	@EffectiveFromTimeKey INT=24928,
--	@EffectiveToTimeKey	INT=49999,
--    @Result		INT=0 ,
--	@UniqueUploadID INT=41
BEGIN
SET DATEFORMAT DMY
	SET NOCOUNT ON;
	Declare @CollIDAutoGenerated   Int
    Declare @CollateralID		   varchar(30)=''
   --DECLARE @Timekey INT
   --SET @Timekey=(SELECT MAX(TIMEKEY) FROM dbo.SysProcessingCycle
			--	WHERE ProcessType='Quarterly')

			Set @Timekey=(
			select CAST(B.timekey as int)from SysDataMatrix A
			Inner Join SysDayMatrix B ON A.TimeKey=B.TimeKey
			 where A.CurrentStatus='C'
			 )

	PRINT @TIMEKEY

	SET @EffectiveFromTimeKey=@TimeKey
	SET @EffectiveToTimeKey=49999


Declare @Year INT
Declare @FromDate Varchar(10)
Declare @ToDate Varchar(10)
SET @Year=DATEPART(YEAR,Getdate())

SET @FromDate=Convert(Varchar(4),(@Year-1))+'-04-01' 
SET @ToDate=Convert(Varchar(4),(@Year))+'-03-31' 


	DECLARE @FilePathUpload	VARCHAR(100)
				   SET @FilePathUpload=@UserLoginId+'_'+@filepath
					PRINT '@FilePathUpload'
					PRINT @FilePathUpload


		BEGIN TRY

		--BEGIN TRAN
		
IF (@MenuId=58)
BEGIN
 --Set @FilePathUpload='mismaker_CollateralUpload_3.xlsx'

	IF (@OperationFlag=1)

	BEGIN


	 IF OBJECT_ID('TEMPDB..#UserMasterUploadData')IS NOT NULL
			DROP TABLE #UserMasterUploadData
			--Select * from DimUserInfo
	 SELECT 
				
				 c.value('./SrNo[1]','int')SrNo
				,c.value('./UserID[1]','varchar(max)')UserID
				,c.value('./UserName[1]','varchar(max)')UserName
				,c.value('./UserRole[1]','varchar(max)')UserRole
				,c.value('./Designation[1]','varchar(max)')Designation
				,c.value('./UserDepartment[1]','nvarchar(510)')UserDepartment				
				--,c.value('./ApplicableSolID[1]','varchar(max)')ApplicableSolID
				--,c.value('./ApplicableBACID[1]','varchar(max)')ApplicableBACID
				,c.value('./UserEmailId[1]','varchar(max)')UserEmailId
				,c.value('./UserMobileNumber[1]','varchar(max)')UserMobileNumber
				,c.value('./UserExtensionNumber [1]','varchar(max)')UserExtensionNumber
				,c.value('./IsCheckerYN[1]','varchar(max)')IsChecker
				,c.value('./IsChecker2YN[1]','varchar(max)')IsChecker2 ---Added By Sachin
				,c.value('./IsActiveYN [1]','varchar(max)')IsActive
				,c.value('./ActionAU[1]','varchar(max)')Perform						
				
				INTO #UserMasterUploadData
				FROM @XmlData.nodes('/DataSet/GridData') AS t(c)


				
		INSERT INTO UserDetail_stg
		(
		   SrNo,
		   UserID,
		   UserName,
		   UserRole,
		   Designation,
		   UserDepartment,
		   UserEmailId,
		   UserMobileNumber, 
		   UserExtensionNumber,
		   IsChecker,
		   IsChecker2,
		   IsActive,
		   sheetname,
		   ActionAU
		   ) 
		   SELECT
		   SrNo,
		   UserID,
		   UserName,
		   UserRole,
		   Designation,
		   UserDepartment,
		   UserEmailId,
		   UserMobileNumber,
		   UserExtensionNumber,
		   IsChecker,
		   IsChecker2,
		   IsActive,
		   @FilePathUpload,
		   Perform 
		   from #UserMasterUploadData


--select * from  UserDetail_stg
		IF NOT (EXISTS (SELECT 1 FROM UserDetail_stg  where sheetname=@FilePathUpload))

							BEGIN
									 --Rollback tran
									SET @Result=-8

								RETURN @Result
							END
			
                   Print 'Sachin'
				   
		IF EXISTS(SELECT 1 FROM UserDetail_stg WHERE sheetname=@FilePathUpload)
		BEGIN
		
		INSERT INTO ExcelUploadHistory
	(
		UploadedBy	
		,DateofUpload	
		,AuthorisationStatus	
		--,Action	
		,UploadType
		,EffectiveFromTimeKey	
		,EffectiveToTimeKey	
		,CreatedBy	
		,DateCreated	
		
	)

	SELECT @UserLoginID
		   ,GETDATE()
		   ,'NP'
		   --,'NP'
		   ,'User Upload'
		   ,@EffectiveFromTimeKey
		   ,@EffectiveToTimeKey
		   ,@UserLoginID
		   ,GETDATE()

		   --sp
			   PRINT @@ROWCOUNT

		   DECLARE @ExcelUploadId INT
	SET 	@ExcelUploadId=(
	SELECT MAX(UniqueUploadID) FROM  ExcelUploadHistory
	)
		
			Insert into UploadStatus (FileNames,UploadedBy,UploadDateTime,UploadType)
		Values(@filepath,@UserLoginID ,GETDATE(),'User Upload')

--		Declare @LoginPassword Varchar(Max)
--		Select @LoginPassword=ParameterValue from syssolutionParameter
--where ParameterName ='DefaultPassword'
		--select * from DimUserInfo_Mod 
		   
	 SET dateformat DMY

		INSERT INTO [DimUserInfo_Mod]
		(
						
						UploadID,
						UserLoginID,
						LoginPassword,
						UserName,
						UserRoleAlt_Key,
						DeptGroupCode,
						MobileNo,
						Email_ID,
						Extension,
						IsChecker,
						IsChecker2,
						Activate,
						CreatedBy,
						DateCreated,
						AuthorisationStatus,
						EffectiveFromTimeKey,
						EffectiveToTimeKey,
						ScreenFlag,
						PasswordChanged,
						UserLocation,
						SuspendedUser,
						EmployeeID,
						IsEmployee,
					
						DepartmentId,
						ActionAU,
						Designation
						,DesignationAlt_Key
						)
						
		
		SELECT
		
			@ExcelUploadId,
		   UserID,
		   @LoginPassword,
		   UserName,
		   B.UserRoleAlt_Key,
		   C.DeptGroupId,
		   UserMobileNumber,
		   UserEmailId,
		
		   UserExtensionNumber,
		   IsChecker,
		   IsChecker2,
		   IsActive,
		   @UserLoginID,
			GETDATE(),
			'NP',
			@Timekey,
			49999,
			'U',
			--'Y',
			'N',
			'HO',
			'N',
			UserID,
			1,
			C.DeptGroupId,
			A.ActionAU
			,A.Designation
			,Dp.ParameterAlt_Key
			
		FROM UserDetail_stg A
		Left Join DimUserRole B ON A.UserRole=B.RoleDescription
		and B.EffectiveFromTimeKey<=@Timekey AND B.EffectiveToTimeKey>=@Timekey
		Left Join DimUserDeptGroup C On A.UserDepartment=C.DeptGroupCode
		and C.EffectiveFromTimeKey<=@Timekey AND C.EffectiveToTimeKey>=@Timekey
		 left join  (select ParameterAlt_Key,ParameterName from DimParameter  where
                                        DimParameterName = 'DimUserDesignation')DP
										ON A.Designation=DP.ParameterName

		where sheetname=@FilePathUpload
	

-----------------------Remove Duplicate From DimUserInfo_Mod------Update By Vinit
;With Remove_duplicate As (
select ROW_NUMBER() over (partition by UserLoginID order by UserLoginID ) ULID ,* from DimUserInfo_Mod ) 
delete from Remove_duplicate  where ULID >1

----------------------------------------------------------------------------------
		
		---DELETE FROM STAGING DATA Sachin
		 DELETE FROM UserDetail_stg
		 WHERE sheetname=@FilePathUpload

		 --RETURN @ExcelUploadId

		  

END
	
	END


--------------------------------------------
	IF (@OperationFlag=16)----AUTHORIZE

	BEGIN
		PRINT 'SACHINTEST111 '
		UPDATE 
			[DimUserInfo_Mod] 
			SET 
			AuthorisationStatus	='1A'
			,ApprovedByFirstLevel	=@UserLoginID
			,DateApprovedFirstLevel	=GETDATE()
			
			WHERE UploadId=@UniqueUploadID

			   UPDATE 
		   ExcelUploadHistory
		   SET AuthorisationStatus='1A'
		  ,ApprovedByFirstLevel	=@UserLoginID
			,DateApprovedFirstLevel	=GETDATE()
		   where UniqueUploadID=@UniqueUploadID
		   AND UploadType='User Upload'

    END 
	IF (@OperationFlag=20)----AUTHORIZE

	BEGIN
		
		UPDATE 
			[DimUserInfo_Mod] 
			SET 
			AuthorisationStatus	='A'
			,ApprovedBy	=@UserLoginID
			,DateApproved	=GETDATE()
			
			WHERE UploadId=@UniqueUploadID

			--UPDATE 
			--[DimUserInfo_Mod] 
			--SET 
			--AuthorisationStatus	='A'
			--,ApprovedBy	=@UserLoginID
			--,DateApproved	=GETDATE()
			--WHERE UploadId=@UniqueUploadID
			
			--Update  A
			--Set A.EffectiveToTimeKey=A.EffectiveFromTimeKey-1
			--from [CollateralDetailUpload] A
			--inner join [DimUserInfo_Mod] B
			--ON A.AccountID=B.AccountID
			--AND B.EffectiveFromTimeKey <=@Timekey
			--AND B.EffectiveToTimeKey >=@Timekey
			--Where B.UploadId=@UniqueUploadID
			--AND A.EffectiveToTimeKey >=49999

		
		

						 SET dateformat DMY

			INSERT INTO [DimUserInfo]
		(
						
					
						UserLoginID,
						UserName,
						LoginPassword,
						UserRoleAlt_Key,
						DeptGroupCode,
						MobileNo,
						Email_ID,
						Extension,
						IsChecker,
						IsChecker2,
						Activate,
						
					 AuthorisationStatus,
						 EffectiveFromTimeKey,
						EffectiveToTimeKey,
						CreatedBy,
						DateCreated,
						ModifyBy,
						DateModified,
						ApprovedBy,
						DateApproved,
						ScreenFlag,
						PasswordChanged,
						UserLocation,
						SuspendedUser,
						EmployeeID,
						IsEmployee,
					
						DepartmentId
						,Designation
						,DesignationAlt_Key
						)
			SELECT 
			
						UserLoginID,
						UserName,
						LoginPassword,
						UserRoleAlt_Key,
						DeptGroupCode,
						MobileNo,
						Email_ID,
						Extension,
						IsChecker,
						IsChecker2,
						Activate,
						
						A.AuthorisationStatus,
					@Timekey,
					49999,
					A.CreatedBy,
					A.DateCreated,
					A.ModifyBy,
					A.DateModified,
					@UserLoginID,
					Getdate(),
					ScreenFlag,
						--'Y',
						'N',
						UserLocation,
						SuspendedUser,
						EmployeeID,
						IsEmployee,
					
						DepartmentId
						,Designation
					    ,DesignationAlt_Key
			FROM [DimUserInfo_Mod] A
			
												

						
			WHERE  A.UploadId=@UniqueUploadID and A.EffectiveToTimeKey>=@Timekey 
			AND A.ActionAU='A'

 
 Update A
 SET 
						A.UserName=B.UserName,
						A.LoginPassword=@LoginPassword,
						A.UserRoleAlt_Key=B.UserRoleAlt_Key,
						A.DeptGroupCode=B.DeptGroupCode,
						A.MobileNo=B.MobileNo,
						A.Email_ID=B.Email_ID,
						A.Extension=B.Extension,
						A.IsChecker=B.IsChecker,
						A.IsChecker2=B.IsChecker2,
						A.Activate=B.Activate,
						
					    A.AuthorisationStatus=B.AuthorisationStatus,
					
						A.CreatedBy=B.CreatedBy,
						A.DateCreated=B.DateCreated,
						A.ModifyBy=B.ModifyBy,
						A.DateModified=B.DateModified,
						A.ApprovedBy=@UserLoginID,
						A.DateApproved=Getdate(),
						A.ScreenFlag=B.ScreenFlag,
						A.PasswordChanged='Y',
						A.UserLocation=B.UserLocation,
						A.SuspendedUser=B.SuspendedUser,
						A.EmployeeID=B.EmployeeID,
						A.IsEmployee=B.IsEmployee,
					
						A.DepartmentId=B.DepartmentId
						,A.Designation=B.Designation
FROM [DimUserInfo] A
INNER JOIN [DimUserInfo_Mod] B ON A.UserLoginID=B.UserLoginID
WHERE  B.UploadId=@UniqueUploadID and B.EffectiveToTimeKey>=@Timekey 
			AND B.ActionAU='U'
		

				UPDATE
				ExcelUploadHistory
				SET AuthorisationStatus='A',ApprovedBy=@UserLoginID,DateApproved=GETDATE()
				WHERE EffectiveFromTimeKey<=@Timekey AND EffectiveToTimeKey>=@Timekey
				AND UniqueUploadID=@UniqueUploadID
				AND UploadType='User Upload'

				


	END


	IF (@OperationFlag=17)----REJECT

	BEGIN
		
		--UPDATE 
		--	[DimUserInfo_Mod] 
		--	SET 
		--	AuthorisationStatus	='R'
		--	,ApprovedBy	=@UserLoginID
		--	,DateApproved	=GETDATE()
			
		--	WHERE UploadId=@UniqueUploadID
		--	AND AuthorisationStatus='NP'

			UPDATE 
			[DimUserInfo_Mod] 
			SET 
			AuthorisationStatus	='R'
			,ApprovedByFirstLevel	=@UserLoginID
			,DateApprovedFirstLevel	=GETDATE()
			,EffectiveToTimeKey=EffectiveFromTimeKey-1
			WHERE UploadId=@UniqueUploadID
			AND AuthorisationStatus='NP'
			----SELECT * FROM IBPCPoolDetail

			UPDATE
				ExcelUploadHistory
				SET AuthorisationStatus='R',ApprovedBy=@UserLoginID,DateApproved=GETDATE()
				WHERE EffectiveFromTimeKey<=@Timekey AND EffectiveToTimeKey>=@Timekey
				AND UniqueUploadID=@UniqueUploadID
				AND UploadType='User Upload'



	END

IF (@OperationFlag=21)----REJECT

	BEGIN
		
		--UPDATE 
		--	[DimUserInfo_Mod] 
		--	SET 
		--	AuthorisationStatus	='R'
		--	,ApprovedBy	=@UserLoginID
		--	,DateApproved	=GETDATE()
			
		--	WHERE UploadId=@UniqueUploadID
		--	AND AuthorisationStatus in('NP','1A')

			UPDATE 
			[DimUserInfo_Mod] 
			SET 
			AuthorisationStatus	='R'
			,ApprovedBy	=@UserLoginID
			,DateApproved	=GETDATE()
			,EffectiveToTimeKey=EffectiveFromTimeKey-1
			WHERE UploadId=@UniqueUploadID
			AND AuthorisationStatus in('NP','1A')
			----SELECT * FROM IBPCPoolDetail

			UPDATE
				ExcelUploadHistory
				SET AuthorisationStatus='R',ApprovedBy=@UserLoginID,DateApproved=GETDATE()
				WHERE EffectiveFromTimeKey<=@Timekey AND EffectiveToTimeKey>=@Timekey
				AND UniqueUploadID=@UniqueUploadID
				AND UploadType='User Upload'



	END


END


	--COMMIT TRAN
		---SET @Result=CASE WHEN  @OperationFlag=1 THEN @UniqueUploadID ELSE 1 END
		SET @Result=CASE WHEN  @OperationFlag=1 AND @MenuId=58 THEN @ExcelUploadId 
					ELSE 1 END

		
		 Update UploadStatus Set InsertionOfData='Y',InsertionCompletedOn=GETDATE() where FileNames=@filepath

		 ---- IF EXISTS(SELECT 1 FROM IBPCPoolDetail_stg WHERE filEname=@FilePathUpload)
		 ----BEGIN
			----	 DELETE FROM IBPCPoolDetail_stg
			----	 WHERE filEname=@FilePathUpload

			----	 PRINT 'ROWS DELETED FROM IBPCPoolDetail_stg'+CAST(@@ROWCOUNT AS VARCHAR(100))
		 ----END
		 

		RETURN @Result
		--RETURN @ExcelUploadId
	END TRY
	BEGIN CATCH 
	   --ROLLBACK TRAN
	   --PRINT 'CatchDelete'
	   --PRINT 'UniqueUploadID'
	   --PRINT @UniqueUploadID
	   --PRINT 'ExcelUploadId'
	   --PRINT @ExcelUploadId

	   Delete from ExcelUploadHistory WHERE UniqueUploadID=@ExcelUploadId
				--AND UniqueUploadID=@UniqueUploadID
				--AND UploadType='User Upload'
	SELECT ERROR_MESSAGE(),ERROR_LINE()
	SET @Result=-1
	 Update UploadStatus Set InsertionOfData='Y',InsertionCompletedOn=GETDATE() where FileNames=@filepath
	RETURN -1
	END CATCH

END

GO