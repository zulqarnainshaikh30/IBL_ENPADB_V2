SET QUOTED_IDENTIFIER, ANSI_NULLS ON
GO






/*=========================================
       AUTHOR : TRILOKI KHANNA
       CREATE DATE : 17-01-2022
       MODIFY DATE : 07-04-2022
       DESCRIPTION : Test Case Cover in This SP

 RefCustomerID    TestCase
2     Degradation - Non Agri with Always STD = Y
15    Degradation - CC/OD: Non Agri - Interest Servicing with Always STD = Y
16    Degradation - CC/OD: Non Agri - Conti Excess Date with Always STD = Y
17    Degradation - CC/OD: Non Agri - Last Credit Date with Always STD = Y
18    Degradation - CC/OD: Non Agri - Stock Stmt Date with Always STD = Y
19    Degradation - CC/OD: Non Agri - Last Review Due Date with Always STD = Y
20    Degradation - CC/OD: Agri - Interest Servicing with Always STD = Y
21    Degradation - CC/OD: Agri - Conti Excess Date with Always STD = Y
22    Degradation - CC/OD: Agri - Last Credit Date with Always STD = Y
23    Degradation - CC/OD: Agri - Last Review Due Date with Always STD = Y
25    Degradation - Non Agri - Interest Servicing Conti Excess Date with Always STD =Y
27    Degradation - Agri - Interest Servicing Conti Excess Date with Always STD =Y
29    Degradation - Non Agri - Interest Servicing Conti Excess Date Last Credit Date with Always STD =Y
31    Degradation - Agri - Interest Servicing Conti Excess Date Last Credit Date with Always STD =Y
33    Degradation - Non Agri - Interest Servicing Conti Excess Date Last Credit Date Stock Stmt Date with Always STD =Y
35    Degradation - Agri - Interest Servicing Conti Excess Date Last Credit Date Last Review Due Date with Always STD =Y
37    Degradation - Non Agri -OverDue Interest Servicing Conti Excess Date Last Credit Date Stock Stmt Date Last Review Due Date with Always STD =Y
46    NULL
118   Identification of SMA-0 (Always_STD Ac)
65    Security Valuation date validations - Current Asset Expired
66    Security Valuation date validations - Current Asset Active
67    Security Valuation date validations - Fixed Asset Expired
68    Security Valuation date validations - Fixed Asset Active
69    Security Valuation date validations - Permanent Asset Expired
70    Security Valuation date validations - Permanent Asset Active
76    Populaton of Secured Amount - FlgSecured = S
77    Populaton of Secured Amount - FlgSecured = U
78    Populaton of UnSecured Amount - FlgSecured = S
79    Populaton of UnSecured Amount - FlgSecured = U
92    Populaton of Secured Amount - FlgSecured = C
93    Populaton of UnSecured Amount - FlgSecured = C

=============================================*/

/*=========================================
 AUTHER : TRILOKI SHNAKER KHANNA
 CREATE DATE : 27-11-2019
 MODIFY DATE : 27-11-2019
 DESCRIPTION : INSERT DATA FOR PRO.CUSTOMER CAL AND PRO.ACCOUNT CAL TABLE AND UPDATE SOME OTHER COLUMN
EXEC [PRO].[InsertDataforAssetClassficationIBL] @TIMEKEY=26343,@BRANCHCODE=NULL,@ISMOC='N'
=============================================*/
CREATE PROCEDURE [PRO].[InsertDataforAssetClassficationIBL] 
      @TIMEKEY INT 
      ,@BRANCHCODE VARCHAR(20)=NULL,
      @ISMOC CHAR(1)='N'
with recompile
AS
BEGIN 

SET NOCOUNT ON
BEGIN  TRY      
      
IF EXISTS(SELECT 1 FROM PRO.AccountCal_Hist WHERE EffectiveFromTimeKey>@TIMEKEY)
      BEGIN
            RAISERROR ('You are going to process for wrong date, Please check....',16,1)
      END

DECLARE @ProcessingDate DATE=(SELECT DATE FROM SYSDAYMATRIX WHERE TIMEKEY=@TIMEKEY)
DECLARE @SETID INT =(SELECT ISNULL(MAX(ISNULL(SETID,0)),0)+1 FROM [PRO].[PROCESSMONITOR] WHERE TIMEKEY=@TIMEKEY)
DECLARE @LastQtrDateKey INT=(select LastQtrDateKey from sysdaymatrix where timekey=@TIMEKEY)
DECLARE @LastMonthDateKey INT=(select LastMonthDateKey from sysdaymatrix where timekey=@TIMEKEY)
DECLARE @PrvDateKey INT=(select timekey-1 from sysdaymatrix where TimeKey=@TIMEKEY)
DECLARE @PROCESSMONTH DATE =(select date from SysDayMatrix where TimeKey=@TIMEKEY)
DECLARE @PROCESSDAY VARCHAR(10)=DATENAME(WEEKDAY, (select date from SysDayMatrix where TimeKey=@TIMEKEY)) 
--DECLARE @PANCARDFLAG CHAR(1)=(SELECT REFVALUE FROM PRO.REFPERIOD WHERE BUSINESSRULE='PANCARDNO' AND EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND EFFECTIVETOTIMEKEY>=@TIMEKEY)
--DECLARE @AADHARCARDFLAG CHAR(1)=(SELECT REFVALUE FROM PRO.REFPERIOD WHERE BUSINESSRULE='AADHARCARD' AND EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND EFFECTIVETOTIMEKEY>=@TIMEKEY)
DECLARE @PANCARDFLAG CHAR(1)=(SELECT 'Y' FROM solutionglobalparameter WHERE ParameterName='PAN Aadhar Dedup Integration' and  ParameterValueAlt_Key=1 AND EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND EFFECTIVETOTIMEKEY>=@TIMEKEY)
DECLARE @AADHARCARDFLAG CHAR(1)=(SELECT 'Y' FROM solutionglobalparameter WHERE ParameterName='PAN Aadhar Dedup Integration' and  ParameterValueAlt_Key=1 AND EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND EFFECTIVETOTIMEKEY>=@TIMEKEY)
DECLARE @JOINTACCOUNTFLAG CHAR(1)=(SELECT REFVALUE FROM PRO.REFPERIOD WHERE BUSINESSRULE='JOINT ACCOUNT' AND EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND EFFECTIVETOTIMEKEY>=@TIMEKEY)
DECLARE @UCFICFLAG CHAR(1)=(SELECT REFVALUE FROM PRO.REFPERIOD WHERE BUSINESSRULE='UCFIC' AND EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND EFFECTIVETOTIMEKEY>=@TIMEKEY)
--DECLARE @QtrFlg char=(select (CASE WHEN Day(@ProcessingDate)=DAY(EOMONTH(@ProcessingDate)) AND MONTH(@ProcessingDate) IN(3,6,9,12)    THEN 'Y'   END) QtrFlg)
DECLARE @6MnthBackTimeKey SmallInt					
DECLARE @6MonthBackDate Date = DATEADD(M,-6,@ProcessingDate) 

TRUNCATE TABLE  PRO.CUSTOMERCAL
TRUNCATE TABLE  PRO.ACCOUNTCAL

DELETE FROM PRO.PROCESSMONITOR  WHERE TIMEKEY=@TIMEKEY 

UPDATE PRO.ACLRUNNINGPROCESSSTATUS SET COMPLETED='N',COUNT=0,ERRORDESCRIPTION=NULL , ERRORDATE=NULL 
            
INSERT INTO PRO.ProcessMonitor(UserID,Description,MODE,StartTime,EndTime,TimeKey,SetID)
SELECT ORIGINAL_LOGIN(),'INSERT DATA FOR PRO.CUSTOMERCAL CAL TABLE','RUNNING',GETDATE(),NULL,@TIMEKEY,@SetID

 /*--------------INSERT DATA FOR PRO.CUSTOMERCAL CAL TABLE--------------------------*/
 DROP TABLE IF EXISTS #AdvAcBasicDetail
 DROP TABLE IF EXISTS #CustomerBasicDetail

 select RefCustomerId,CustomerEntityId,CustomerACID,AccountEntityId,AssetClass,FlgSecured,ISLAD,
		BRANCHCODE,SYSTEMACID,PRODUCTALT_KEY,SEGMENTCODE,ACCOUNTOPENDATE,FacilityType,DTOFFIRSTDISB,CURRENTLIMIT,CURRENTLIMITDT
		,CURRENCYALT_KEY,SCHEMEALT_KEY,ACTIVITYALT_KEY,InttTypeAlt_Key,SubSectorAlt_Key,OriginalLimitDt,SOURCEALT_KEY
 into #AdvAcBasicDetail from AdvAcBasicDetail where EffectiveFromTimeKey<=@TIMEKEY and EffectiveToTimeKey>=@TIMEKEY
 
 select AccountEntityId,Balance,PrincipalBalance,OverduePrincipal,Overdueinterest,OverOtherdue,OverduePrincipalDt,OverdueIntDt,OverdueOtherDt
		,OverDue,OverDueSinceDt,SourceAssetClass,MocTypeAlt_Key,MocStatus,MocDate,AdvanceRecovery,NotionalInttAmt,DFVAmt
 into #AdvAcBalanceDetail from AdvAcBalanceDetail where EffectiveFromTimeKey<=@TIMEKEY and EffectiveToTimeKey>=@TIMEKEY


 select CustomerId,CustomerEntityId,UCIF_ID,UcifEntityID,CustomerName,ParentBranchCode,ConstitutionAlt_Key,SourceSystemAlt_Key,D2kCustomerid
 into #CustomerBasicDetail from CustomerBasicDetail where EffectiveFromTimeKey<=@TIMEKEY and EffectiveToTimeKey>=@TIMEKEY

INSERT INTO PRO.CUSTOMERCAL
(
EffectiveFromTimeKey,
EffectiveToTimeKey                        
,BRANCHCODE                                     
,CUSTOMERENTITYID  
,RefCustomerID                 
,CUSTOMERNAME                                                
,CONSTITUTIONALT_KEY
,FlgDeg,
FlgUpg,
FlgMoc,
FlgSMA,
FlgProcessing,
FlgErosion,
FlgPNPA,
FlgPercolation,
FlgInMonth,
FlgDirtyRow,
SrcNPA_Dt,
SysNPA_Dt,
SplCatg1Alt_Key,
SplCatg2Alt_Key,
SplCatg3Alt_Key,
SplCatg4Alt_Key,
SourceSystemCustomerID,
Asset_Norm,
UCIF_ID,
UcifEntityID
,SourceAlt_Key
,IsChanged
)
SELECT                            
@TIMEKEY EffectiveFromTimeKey,
@TIMEKEY EffectiveToTimeKey,   
ParentBranchCode BRANCHCODE, 
CBD.CUSTOMERENTITYID,     
CBD.CUSTOMERID, 
CBD.CUSTOMERNAME,  
CBD.ConstitutionAlt_Key              
,'N' AS FlgDeg,
'N' AS FlgUpg,
'N' AS FlgMoc,
'N' AS FlgSMA ,
'N' AS FlgProcessing,
'N' AS FlgErosion,
'N' AS FlgPNPA,
'N' AS FlgPercolation,
'N' AS FlgInMonth,
'N' AS FlgDirtyRow   ,
NULL AS SrcNPA_Dt,
NULL AS SysNPA_Dt,
0 SplCatg1Alt_Key,
0 SplCatg2Alt_Key,
0 SplCatg3Alt_Key,
0 SplCatg4Alt_Key,
CBD.D2kCustomerid AS SourceSystemCustomerID
,'NORMAL' AS Asset_Norm
,UCIF_ID
,UcifEntityID
,CBD.SourceSystemAlt_Key 
,'N' IsChanged

FROM #CUSTOMERBASICDETAIL CBD  INNER MERGE JOIN #AdvAcBasicDetail ABD ON CBD.CustomerEntityId=ABD.CustomerEntityId

GROUP BY 
ParentBranchCode,
CBD.CUSTOMERENTITYID,     
CBD.CUSTOMERID, 
CBD.CUSTOMERNAME,  
CBD.ConstitutionAlt_Key 
,CBD.UCIF_ID
,CBD.UcifEntityID 
,CBD.SourceSystemAlt_Key
,CBD.D2kCustomerid
--OPTION(MAXDOP 1)

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IdentityKey = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='INSERT DATA FOR PRO.CUSTOMERCAL CAL TABLE'


/*------------------ACCOUNT DATA INSERT------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'INSERT DATA IN ACCOUNTCAL TABLE','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID



INSERT INTO PRO.ACCOUNTCAL
(
ACCOUNTENTITYID
,CUSTOMERACID
,FLGDEG
,FLGDIRTYROW
,FLGINMONTH
,FLGSMA
,FLGPNPA
,FLGUPG
,FLGFITL
,FLGABINITIO
,REFPERIODOVERDUEUPG
,REFPERIODOVERDRAWNUPG
,REFPERIODNOCREDITUPG
,REFPERIODINTSERVICEUPG
,REFPERIODSTKSTATEMENTUPG
,REFPERIODREVIEWUPG
,EFFECTIVEFROMTIMEKEY
,EFFECTIVETOTIMEKEY
,ASSET_NORM
,SPLCATG1ALT_KEY
,SPLCATG2ALT_KEY
,SPLCATG3ALT_KEY
,SPLCATG4ALT_KEY
,BALANCE
,BALANCEINCRNCY
,NETBALANCE
,CURRENCYALT_KEY
,SOURCEALT_KEY
,SECAPP
,PROVCOVERGOVGUR
,BANKPROVSECURED
,BANKPROVUNSECURED
,BANKTOTALPROVISION
,RBIPROVSECURED
,RBIPROVUNSECURED
,RBITOTALPROVISION
,APPGOVGUR
,USEDRV
,COMPUTEDCLAIM
,PROVPERSECURED
,PROVPERUNSECURED
,REFPERIODOVERDUE 
,REFPERIODOVERDRAWN   
,REFPERIODNOCREDIT  
,REFPERIODINTSERVICE  
,REFPERIODSTKSTATEMENT
,REFPERIODREVIEW
,INITIALASSETCLASSALT_KEY
,FINALASSETCLASSALT_KEY
,RefCustomerID    
,SourceSystemCustomerID
,CUSTOMERENTITYID
,BranchCode
,ProductAlt_Key                                        
,CURRENTLIMIT           
,CURRENTLIMITDT 
,SchemeAlt_Key 
,SubSectorAlt_Key
,FacilityType
,InttRate
,AcOpenDt
,FirstDtOfDisb
,PrvAssetClassAlt_Key
,FlgSecured
,UCIF_ID
,UcifEntityID
,ActSegmentCode
,IsChanged
)
SELECT
ACCOUNTENTITYID=ACCOUNTENTITYID
,CUSTOMERACID=CUSTOMERACID
,FLGDEG='N'
,FLGDIRTYROW ='N'
,FLGINMONTH='N'
,FLGSMA='N'
,FLGPNPA='N'
,FLGUPG='N'
,FLGFITL='N'
,FLGABINITIO='N'
,REFPERIODOVERDUEUPG=0
,REFPERIODOVERDRAWNUPG=0
,REFPERIODNOCREDITUPG =0
,REFPERIODINTSERVICEUPG=0
,REFPERIODSTKSTATEMENTUPG=0
,REFPERIODREVIEWUPG=0
,EFFECTIVEFROMTIMEKEY=@TIMEKEY
,EffectiveToTimeKey=@TIMEKEY
,ASSET_NORM='NORMAL'
,SPLCATG1ALT_KEY=0
,SPLCATG2ALT_KEY=0
,SPLCATG3ALT_KEY=0
,SPLCATG4ALT_KEY=0
,BALANCE=0.00
,BALANCEINCRNCY =0.00
,NETBALANCE =0.00
,ABD.CURRENCYALT_KEY  
,ABD.SOURCEALT_KEY AS  SOURCEALT_KEY
,abd.FlgSecured AS SecApp  
,PROVCOVERGOVGUR=0.00
,BANKPROVSECURED=0.00
,BANKPROVUNSECURED=0.00
,BANKTOTALPROVISION=0.00
,RBIPROVSECURED=0.00
,RBIPROVUNSECURED=0.00
,RBITOTALPROVISION=0.00
,APPGOVGUR=0.00
,USEDRV=0.00
,COMPUTEDCLAIM=0.00
,PROVPERSECURED=0.00
,PROVPERUNSECURED=0.00
,REFPERIODOVERDUE =0
,REFPERIODOVERDRAWN   =0
,REFPERIODNOCREDIT  =0
,REFPERIODINTSERVICE   =0
,REFPERIODSTKSTATEMENT  =0
,REFPERIODREVIEW  =0
,1 AS INITIALASSETCLASSALT_KEY
,1 AS FINALASSETCLASSALT_KEY
,ABD.RefCustomerID AS RefCustomerID 
,CBD.SourceSystemCustomerID AS SourceSystemCustomerID
,CBD.CUSTOMERENTITYID 
,ABD.BRANCHCODE
,ABD.ProductAlt_Key                                        
,ABD.CURRENTLIMIT           
,ABD.CURRENTLIMITDT 
,ABD.SchemeAlt_Key 
,ABD.SubSectorAlt_Key 
,ABD.FacilityType
,null AS InttRate
,ABD.AccountOpenDate AS AcOpenDt
,ABD.DtofFirstDisb AS FirstDtOfDisb
,1 AS PrvAssetClassAlt_Key
,FlgSecured--'U' FlgSecured--ABD.FlgSecured AS FlgSecured
,CBD.UCIF_ID
,CBD.UcifEntityID
,abd.segmentcode
,'N' IsChanged
FROM   #AdvAcBasicDetail  ABD  INNER  HASH JOIN  PRO.CUSTOMERCAL   CBD ON abd.CUSTOMERENTITYID=CBD.CUSTOMERENTITYID   
LEFT JOIN DimProduct C ON C.ProductAlt_Key =ABD.ProductAlt_Key
AND (C.EffectiveFromTimeKey<=@TIMEKEY AND C.EffectiveToTimeKey>=@TIMEKEY)                                           

GROUP BY                                          
 ABD.BRANCHCODE           
 ,ABD.CUSTOMERENTITYID           
 ,ABD.ACCOUNTENTITYID           
 ,ABD.SYSTEMACID           
 ,ABD.CUSTOMERACID          
 --,ABD.GLALT_KEY          
 --,ABD.GLPRODUCTALT_KEY          
 ,ABD.PRODUCTALT_KEY          
 ,ABD.SEGMENTCODE           
 ,ABD.ACCOUNTOPENDATE           
 ,ABD.FacilityType         
 ,ABD.DTOFFIRSTDISB                  
 ,ABD.CURRENTLIMIT           
 ,ABD.CURRENTLIMITDT 
 ,ABD.CURRENCYALT_KEY  
 ,ABD.REFCUSTOMERID   
 ,ABD.SCHEMEALT_KEY 
 ,ABD.ACTIVITYALT_KEY 
 ,ABD.InttTypeAlt_Key
 ,ABD.SubSectorAlt_Key  
 ,ABD.OriginalLimitDt    
 ,CBD.CUSTOMERENTITYID  
 --,ABD.Pref_InttRate    
 ,ABD.SOURCEALT_KEY    
,CBD.UCIF_ID
,CBD.UcifEntityID     
,ABD.FlgSecured
,CBD.SourceSystemCustomerID 


/* starts of temporary updates*/

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IdentityKey = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='INSERT DATA IN ACCOUNTCAL TABLE'


/*------------------UPDATE PANNO IN CUSTOMER CAL------------------*/
/* nOT REQUIRED BELOW CODE FOR ibl
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE PANNO','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE A SET A.PANNO=B.PAN FROM PRO.CUSTOMERCAL A 
INNER JOIN DBO.AdvCustRelationship B 
ON  A.CustomerEntityId=B.CustomerEntityId
WHERE (B.PAN LIKE '%[A-Z][A-Z][A-Z][A-Z][A-Z][0-9][0-9][0-9][0-9][A-Z]%')
AND( B.PAN NOT LIKE '%FORMO%' AND PAN NOT LIKE '%FORPM%' AND PAN NOT LIKE '%FORMF%' )
AND (B.PAN IS NOT NULL)
AND B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY

UPDATE PRO.CUSTOMERCAL SET  PANNO=NULL WHERE PANNO='FORMO6161O'
UPDATE PRO.CUSTOMERCAL SET  PANNO=NULL WHERE PANNO='FORPM6060F'
UPDATE PRO.CUSTOMERCAL SET  PANNO=NULL WHERE PANNO='FORPM6060P'
UPDATE PRO.CUSTOMERCAL SET  PANNO=NULL WHERE PANNO='FORMF6060F'
UPDATE PRO.CUSTOMERCAL SET  PANNO=NULL WHERE PANNO='AAAAA1111A'

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE PANNO'


/*------------------UPDATE AADHAR NUMBER IN CUSTOMER CAL------------------*/

INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE AADHAR NUMBER IN CUSTOMER CAL','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE A SET A.AADHARCARDNO=B.AadhaarId FROM PRO.CUSTOMERCAL A 
INNER JOIN DBO.AdvCustRelationship B 
ON  A.CustomerEntityId=B.CustomerEntityId
WHERE LEN(LTRIM(RTRIM(B.AadhaarId)))=12 AND B.AadhaarId LIKE '%[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]%'
AND (B.AadhaarId IS NOT NULL)
AND B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY 

UPDATE PRO.CUSTOMERCAL SET AADHARCARDNO=NULL  WHERE AADHARCARDNO='000000000000'
UPDATE PRO.CUSTOMERCAL SET AADHARCARDNO=NULL  WHERE AADHARCARDNO='111111111111'
UPDATE PRO.CUSTOMERCAL SET AADHARCARDNO=NULL  WHERE AADHARCARDNO='222222222222'
UPDATE PRO.CUSTOMERCAL SET AADHARCARDNO=NULL  WHERE AADHARCARDNO='333333333333'
UPDATE PRO.CUSTOMERCAL SET AADHARCARDNO=NULL  WHERE AADHARCARDNO='444444444444'
UPDATE PRO.CUSTOMERCAL SET AADHARCARDNO=NULL  WHERE AADHARCARDNO='555555555555'
UPDATE PRO.CUSTOMERCAL SET AADHARCARDNO=NULL  WHERE AADHARCARDNO='666666666666'
UPDATE PRO.CUSTOMERCAL SET AADHARCARDNO=NULL  WHERE AADHARCARDNO='777777777777'
UPDATE PRO.CUSTOMERCAL SET AADHARCARDNO=NULL  WHERE AADHARCARDNO='888888888888'
UPDATE PRO.CUSTOMERCAL SET AADHARCARDNO=NULL  WHERE AADHARCARDNO='999999999999'

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE AADHAR NUMBER IN CUSTOMER CAL'


----/*------------------INSERT INVALID PANCARDNO|AADHARCARDNO------------------*/

INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'INSERT INVALID PANCARDNO|AADHARCARDNO','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

 DELETE  FROM  PRO.INVALIDPANAADHAR WHERE EFFECTIVEFROMTIMEKEY=@TIMEKEY AND EffectiveToTimeKey>=@TIMEKEY

INSERT INTO PRO.INVALIDPANAADHAR
(
DATEOFDATA
,CUSTOMERID
,SOURCESYSTEMCUSTOMERID
,CUSTOMERNAME
,SOURCESYSTEMNAME
,PANNO
,AADHARCARD
,EFFECTIVEFROMTIMEKEY
,EFFECTIVETOTIMEKEY
)
SELECT @PROCESSINGDATE,A.RefCustomerID,A.SOURCESYSTEMCUSTOMERID,A.CUSTOMERNAME ,NULL AS SOURCESYSTEMNAME,B.PAN,NULL,@TIMEKEY,@TIMEKEY 
FROM PRO.CUSTOMERCAL A 
INNER JOIN DBO.AdvCustRelationship B 
ON  A.CustomerEntityId=B.CustomerEntityId
WHERE (B.PAN NOT LIKE '%[A-Z][A-Z][A-Z][A-Z][A-Z][0-9][0-9][0-9][0-9][A-Z]%')
AND (B.PAN IS NOT NULL)
AND B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY

UNION ALL

SELECT @PROCESSINGDATE,A.RefCustomerID,A.SOURCESYSTEMCUSTOMERID,A.CUSTOMERNAME ,NULL AS SOURCESYSTEMNAME, B.PAN,NULL,@TIMEKEY,@TIMEKEY FROM PRO.CUSTOMERCAL A 
INNER JOIN DBO.AdvCustRelationship B 
ON  A.CustomerEntityId=B.CustomerEntityId
WHERE  ( B.PAN  LIKE '%FORMO%'  OR  B.PAN  LIKE '%FORPM%' OR  B.PAN  LIKE '%FORMF%')
AND B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY

INSERT INTO PRO.INVALIDPANAADHAR
(
DATEOFDATA
,CUSTOMERID
,SOURCESYSTEMCUSTOMERID
,CUSTOMERNAME
,SOURCESYSTEMNAME
,PANNO
,AADHARCARD
,EFFECTIVEFROMTIMEKEY
,EFFECTIVETOTIMEKEY
)
SELECT @PROCESSINGDATE,A.RefCustomerID,A.SOURCESYSTEMCUSTOMERID,A.CUSTOMERNAME , NULL AS SOURCESYSTEMNAME,NULL,B.AadhaarId,@TIMEKEY,@TIMEKEY FROM PRO.CUSTOMERCAL A 
INNER JOIN DBO.AdvCustRelationship B 
ON  A.CustomerEntityId=B.CustomerEntityId
WHERE  B.AadhaarId NOT LIKE '%[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]%'
AND (B.AadhaarId IS NOT NULL) 
AND B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='INSERT INVALID PANCARDNO|AADHARCARDNO'

*/


/*-------------UPDATE ProductCode IN ACCOUNTCAL-------------------------------------*/

INSERT INTO PRO.ProcessMonitor(UserID,Description,MODE,StartTime,EndTime,TimeKey,SetID)
SELECT ORIGINAL_LOGIN(),'UPDATE ProductCode IN ACCOUNTCAL','RUNNING',GETDATE(),NULL,@TIMEKEY,@SetID

UPDATE A SET ProductCode=C.ProductCode
FROM PRO.AccountCal A INNER  JOIN #AdvAcBasicDetail B ON A.AccountEntityID=B.AccountEntityID
INNER  JOIN DimProduct C ON B.ProductAlt_Key=C.ProductAlt_Key
WHERE (C.EffectiveFromTimeKey<=@TIMEKEY and C.EffectiveToTimeKey>=@TIMEKEY)
 

-- UPDATE A SET ProductCode=C.ProductCode
--FROM PRO.AccountCal A INNER  JOIN dbo.AdvNFAcBasicDetail B ON A.AccountEntityID=B.AccountEntityID
--INNER  JOIN DimProduct C ON B.ProductAlt_Key=C.ProductAlt_Key
--WHERE  (B.EffectiveFromTimeKey<=@TIMEKEY and B.EffectiveToTimeKey>=@TIMEKEY)
--AND (C.EffectiveFromTimeKey<=@TIMEKEY and C.EffectiveToTimeKey>=@TIMEKEY)

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE  IdentityKey = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE ProductCode IN ACCOUNTCAL'

/*------------********UPDATE DRAWINGPOWER|REVIEWDUEDT FOR ALL ACCOUNT******--------------------*/ 
INSERT INTO PRO.ProcessMonitor(UserID,Description,MODE,StartTime,EndTime,TimeKey,SetID)
SELECT ORIGINAL_LOGIN(),'UPDATE DRAWINGPOWER|REVIEWDUEDT FOR ALL ACCOUNT','RUNNING',GETDATE(),NULL,@TIMEKEY,@SetID

UPDATE A 
SET 
A.DRAWINGPOWER=ISNULL(B.DRAWINGPOWER,0),
A.ReviewDueDt=B.Ac_NextReviewDueDt
FROM PRO.ACCOUNTCAL A INNER MERGE JOIN  dbo.AdvAcFinancialDetail B 
ON   (B.EFFECTIVEFROMTIMEKEY<= @TimeKey AND B.EFFECTIVETOTIMEKEY>=@TimeKey)
AND  A.ACCOUNTENTITYID=B.ACCOUNTENTITYID  
OPTION (MAXDOP 1)

--UPDATE A SET A.DRAWINGPOWER=ISNULL(B.DRAWINGPOWER,0),
--A.ReviewDueDt=B.Ac_NextReviewDueDt
--,A.InttRate = B.Inttrate
--FROM PRO.ACCOUNTCAL A INNER MERGE JOIN   dbo.AdvNFAcFinancialDetail  B 
--ON   (B.EFFECTIVEFROMTIMEKEY<= @TimeKey AND B.EFFECTIVETOTIMEKEY>=@TimeKey)
--AND  A.ACCOUNTENTITYID=B.ACCOUNTENTITYID  
--OPTION (MAXDOP 1) 

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IdentityKey = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE DRAWINGPOWER|REVIEWDUEDT FOR ALL ACCOUNT'


   /*------------********UPDATE FacilityType FOR TLDL ACCOUNT******--------------------*/ 
 
INSERT INTO PRO.ProcessMonitor(UserID,Description,MODE,StartTime,EndTime,TimeKey,SetID)
SELECT ORIGINAL_LOGIN(),'UPDATE Asset_Norm|FacilityType ISLAD  ACCOUNT','RUNNING',GETDATE(),NULL,@TIMEKEY,@SetID
 
UPDATE A SET Asset_Norm='CONDI_STD'
FROM PRO.AccountCal A INNER  JOIN #AdvAcBasicDetail B
ON A.AccountEntityID=B.AccountEntityID
----WHERE  (B.EffectiveFromTimeKey<=@TIMEKEY and B.EffectiveToTimeKey>=@TIMEKEY)
AND ISNULL(B.ISLAD,0)=1 

UPDATE A SET ASSET_NORM='CONDI_STD'
FROM PRO.ACCOUNTCAL A 
INNER JOIN DIMPRODUCT B  ON A.PRODUCTALT_KEY=B.PRODUCTALT_KEY 
WHERE B.ASSETCLASS='CONDI_STD'
AND  (B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY)

UPDATE A SET Asset_Norm='ALWYS_STD'
FROM PRO.AccountCal A INNER  JOIN #AdvAcBasicDetail B
ON A.AccountEntityID=B.AccountEntityID
----WHERE  (B.EffectiveFromTimeKey<=@TIMEKEY and B.EffectiveToTimeKey>=@TIMEKEY) AND assetclass='1'

UPDATE A SET Asset_Norm='ALWYS_NPA'
FROM PRO.AccountCal A INNER  JOIN #AdvAcBasicDetail B
ON A.AccountEntityID=B.AccountEntityID
----WHERE  (B.EffectiveFromTimeKey<=@TIMEKEY and B.EffectiveToTimeKey>=@TIMEKEY) AND assetclass='2'
 
UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IdentityKey = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE Asset_Norm|FacilityType ISLAD  ACCOUNT'


/*-------------UPDATE BANK ASSET CLASSIFICATION IN ACCOUNTCALL------------------------------------*/
INSERT INTO PRO.ProcessMonitor(UserID,Description,MODE,StartTime,EndTime,TimeKey,SetID)
SELECT ORIGINAL_LOGIN(),'UPDATE BANK ASSET CLASSIFICATION IN ACCOUNTCAL','RUNNING',GETDATE(),NULL,@TIMEKEY,@SetID

UPDATE A 
SET AccountStatus=B.SourceAssetClass,
	BankAssetClass =C.AssetClassMappingAlt_Key
FROM pro.AccountCal A  INNER JOIN #AdvAcBalanceDetail B
ON A.AccountEntityID=B.AccountEntityID
----AND B.EffectiveFromTimeKey<=@TIMEKEY AND B.EffectiveToTimeKey>=@TIMEKEY
LEFT JOIN DimAssetClassMapping C 
ON C.SrcSysClassCode=B.SourceAssetClass
	AND A.SourceAlt_Key =C.SourceAlt_Key
	AND C.EffectiveFromTimeKey<=@TIMEKEY AND C.EffectiveToTimeKey>=@TIMEKEY


--UPDATE A 
--SET 
--AccountStatus=B.D2k_OLDAscromID,
--BankAssetClass =C.AssetClassMappingAlt_Key
--FROM pro.AccountCal A INNER JOIN AdvNFAcBasicDetail B
--ON A.AccountEntityID=B.AccountEntityID
--AND B.EffectiveFromTimeKey<=@TIMEKEY 
--AND B.EffectiveToTimeKey>=@TIMEKEY
--LEFT JOIN DimAssetClassMapping C 
--ON C.SrcSysClassCode=B.D2k_OLDAscromID
--AND A.SourceAlt_Key =C.SourceAlt_Key
--And C.EffectiveFromTimeKey<=@TIMEKEY 
--AND C.EffectiveToTimeKey>=@TIMEKEY

UPDATE pro.AccountCal 
SET AccountStatus='STD',
BankAssetClass=1 
WHERE AccountStatus IS NULL

UPDATE PRO.PROCESSMONITOR 
SET ENDTIME=GETDATE() ,
MODE='COMPLETE' 
WHERE  
IdentityKey = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) 
AND TIMEKEY=@TIMEKEY 
AND DESCRIPTION='UPDATE BANK ASSET CLASSIFICATION IN ACCOUNTCAL'  

/*------------********UPDATE ContiExcessDt FOR CC ACCOUNT******--------------------*/ 

INSERT INTO PRO.ProcessMonitor(UserID,Description,MODE,StartTime,EndTime,TimeKey,SetID)
SELECT ORIGINAL_LOGIN(),'UPDATE ContiExcessDt FOR CC ACCOUNT','RUNNING',GETDATE(),NULL,@TIMEKEY,@SetID
      
EXEC PRO.ContExcsSinceDt 
EXEC [PRO].[ContExcsSinceDtDebit]
      
UPDATE A 
SET   
A.ContiExcessDt=B.ContExcsSinceDt
FROM PRO.ACCOUNTCAL A INNER MERGE JOIN  [PRO].[ContExcsSinceDtAccountCal]  B 
ON   
(B.EFFECTIVEFROMTIMEKEY<= @TimeKey AND B.EFFECTIVETOTIMEKEY>=@TimeKey)
AND  A.ACCOUNTENTITYID=B.ACCOUNTENTITYID  
OPTION (MAXDOP 1)

UPDATE A SET   
A.DebitSinceDt=B.ContExcsSinceDebitDt
FROM PRO.ACCOUNTCAL A INNER MERGE JOIN  [PRO].[ContExcsSinceDtDebitAccountCal]  B 
ON   (B.EFFECTIVEFROMTIMEKEY<= @TimeKey AND B.EFFECTIVETOTIMEKEY>=@TimeKey)
AND  A.ACCOUNTENTITYID=B.ACCOUNTENTITYID  
OPTION (MAXDOP 1) 
    
UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IdentityKey = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE ContiExcessDt FOR CC ACCOUNT'
 
/*---------------******UPDATE Balance,OverdueAmt,OverDueSinceDt,BalanceInCrncy and LastCrDate  FROM AdvACBalanceDetail*******----------------------*/  
  
INSERT INTO PRO.ProcessMonitor(UserID,Description,MODE,StartTime,EndTime,TimeKey,SetID)
SELECT ORIGINAL_LOGIN(),'UPDATE Balance,LastCrDate,CreditsinceDt FOR ALL ACCOUNT','RUNNING',GETDATE(),NULL,@TIMEKEY,@SetID

UPDATE A       
SET 
A.Balance=B.Balance,
--A.LastCrDate=B.LastCrDt,
A.CommonMocTypeAlt_Key=B.MocTypeAlt_Key,
A.FlgMoc=B.MocStatus,
A.MOC_Dt=B.MocDate,
A.OverDueSinceDt=B.OverDueSinceDt,
A.OverdueAmt=B.OverDue,
A.PrincOverdue=B.OverduePrincipal,
A.IntOverdue=B.Overdueinterest, 
A.PrincOutStd=B.PrincipalBalance,
A.AdvanceRecovery=B.AdvanceRecovery,
A.NotionalInttAmt=B.NotionalInttAmt,
A.DFVAmt=B.DFVAmt,
A.PrincOverdueSinceDt=B.OverduePrincipalDt,
A.IntOverdueSinceDt=B.OverdueIntDt,
A.OtherOverdue=B.OverOtherdue,
A.OtherOverdueSinceDt=B.OverdueOtherDt 
FROM PRO.ACCOUNTCAL A INNER MERGE JOIN   #ADVACBALANCEDETAIL  B 
ON   ----(B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY)
 A.ACCOUNTENTITYID=B.ACCOUNTENTITYID 
OPTION (MAXDOP 1)

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE  IdentityKey = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE Balance,LastCrDate,CreditsinceDt FOR ALL ACCOUNT'

/* end of temporary updates*/ 

/*------------------UPDATE OVERDUE SINCE DATE DUE TO DPD MAX FOR VISION PLUS DATA ONLY------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE OVERDUE SINCE DATE DUE TO DPD MAX FOR VISION PLUS DATA ONLY','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE A SET A.OVERDUESINCEDT=DATEADD(DAY,-DPD,@PROCESSINGDATE)
FROM PRO.AccountCal A INNER  JOIN DBO.AdvFacCreditCardDetail B ON A.AccountEntityID=B.AccountEntityID
WHERE  (B.EffectiveFromTimeKey<=@TIMEKEY and B.EffectiveToTimeKey>=@TIMEKEY) AND ISNULL(B.DPD,0)>0

--/*------------------UPDATE OVERDUE SINCE DATE DUE TO DPD MAX FOR VISION PLUS DATA ONLY------------------*/
--INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
--SELECT ORIGINAL_LOGIN(),'UPDATE OVERDUE SINCE DATE DUE TO DPD MAX FOR VISION PLUS DATA ONLY','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

--UPDATE A SET A.OVERDUESINCEDT=DATEADD(DAY,-DPD,@PROCESSINGDATE)
--FROM PRO.AccountCal A INNER  JOIN DBO.AdvFacCreditCardDetail B ON A.AccountEntityID=B.AccountEntityID
--WHERE  (B.EffectiveFromTimeKey<=@TIMEKEY and B.EffectiveToTimeKey>=@TIMEKEY) AND ISNULL(B.DPD,0)>0


--UPDATE A SET Liability=B.Liability,CD=B.CD,AccountStatus=b.AccountStatus,AccountBlkCode1=b.AccountBlkCode1,AccountBlkCode2=b.AccountBlkCode2
--FROM PRO.AccountCal A INNER  JOIN AdvFacCreditCardDetail b      on a.AccountEntityID=b.AccountEntityID
--                      AND B.EffectiveFromTimeKey<=@Timekey and B.EffectiveToTimeKey>=@Timekey
--INNER JOIN DIMSOURCEDB c ON A.SourceAlt_Key=c.SourceAlt_Key
--where  SourceName='VISIONPLUS' AND c.EffectiveFromTimeKey<=@Timekey and c.EffectiveToTimeKey>=@Timekey

--UPDATE A SET Liability=B.Liability,CD=B.CD,AccountStatus=b.AccountStatus,AccountBlkCode1=b.AccountBlkCode1,AccountBlkCode2=b.AccountBlkCode2
--FROM PRO.AccountCal A INNER  JOIN DBO.AdvFacCreditCardDetail B ON A.AccountEntityID=B.AccountEntityID
--WHERE  (B.EffectiveFromTimeKey<=@TIMEKEY and B.EffectiveToTimeKey>=@TIMEKEY)

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE OVERDUE SINCE DATE DUE TO DPD MAX FOR VISION PLUS DATA ONLY'


/*-----update SrcAssetClass_Key key|SysAssetClassAlt_Key in customer Cal table--------------*/

INSERT INTO PRO.ProcessMonitor(UserID,Description,MODE,StartTime,EndTime,TimeKey,SetID)
SELECT ORIGINAL_LOGIN(),'SrcAssetClass_Key key|SysAssetClassAlt_Key','RUNNING',GETDATE(),NULL,@TIMEKEY,@SetID

DECLARE @HistTimeKey int=0 
SELECT @HistTimeKey = (CASE 
						  WHEN 
						  (select max(ISNULL(EffectiveFromTimeKey,0)) from pro.AccountCal_Hist) = 0  
						  THEN 0  
						  ELSE @TIMEKEY-1  
					   END)--max(EffectiveFromTimeKey) from pro.AccountCal_Hist where  EffectiveFromTimeKey <@TIMEKEY 
IF ISNULL(@HistTimeKey,0)=0
BEGIN 
  UPDATE A SET 
  A.SrcAssetClassAlt_Key=isnull(c.Cust_AssetClassAlt_Key,1),
  A.SysAssetClassAlt_Key=isnull(c.Cust_AssetClassAlt_Key,1),
  A.SrcNPA_Dt=isnull(C.NPADt,null),
  A.SysNPA_Dt=isnull(C.NPADt,null),
  A.DbtDt=isnull(C.DbtDt,null),
  A.LossDt=isnull(C.LosDt,null)
  FROM PRO.CUSTOMERCAL A  LEFT hash JOIN DBO.AdvCustNPAdetail C
  ON C.CustomerEntityId=A.CustomerEntityId
  AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY     AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY) 
END 

ELSE
BEGIN
  UPDATE A SET 
  A.SrcAssetClassAlt_Key=isnull(c.SysAssetClassAlt_Key,1),
  A.SysAssetClassAlt_Key=isnull(c.SysAssetClassAlt_Key,1),
  A.SrcNPA_Dt=isnull(C.SysNPA_Dt,null),
  A.SysNPA_Dt=isnull(C.SysNPA_Dt,null),
  A.DbtDt=isnull(C.DbtDt,null),
  A.LossDt=isnull(C.LossDt,null)
  FROM PRO.CUSTOMERCAL A  
  LEFT hash JOIN PRO.CustomerCal_Hist C
  ON C.CustomerEntityId=A.CustomerEntityId
  AND (C.EFFECTIVEFROMTIMEKEY<=@HistTimeKey AND C.EFFECTIVETOTIMEKEY>=@HistTimeKey)
END

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IdentityKey = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND TIMEKEY=@TIMEKEY AND DESCRIPTION='SrcAssetClass_Key key|SysAssetClassAlt_Key'
    
/*------------------UPDATE SYSASSETCLASSALT_KEY|SYSNPA_DT BY PAN NO------------------*/
/* not required for IBL
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE SYSASSETCLASSALT_KEY|SYSNPA_DT BY PAN NO','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID
IF ISNULL(@PANCARDFLAG,'N')='Y'
BEGIN

IF OBJECT_ID('TEMPDB..#TEMPTABLEPANCARD') IS NOT NULL
  DROP TABLE #TEMPTABLEPANCARD
      
SELECT PANNO,MAX(ISNULL(SYSASSETCLASSALT_KEY,1)) SYSASSETCLASSALT_KEY
,MIN(SYSNPA_DT) SYSNPA_DT 
INTO #TEMPTABLEPANCARD FROM PRO.CUSTOMERCAL A
INNER JOIN DIMSOURCEDB  B ON B.SOURCEALT_KEY=A.SOURCEALT_KEY AND B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY
WHERE PANNO IS NOT NULL AND  ISNULL(SYSASSETCLASSALT_KEY,1)<>1
GROUP BY  PANNO

ALTER TABLE  #TEMPTABLEPANCARD ADD SOURCEDBNAME VARCHAR (20)


UPDATE 
A 
SET SOURCEDBNAME=C.SOURCEDBNAME
FROM #TEMPTABLEPANCARD A
INNER JOIN PRO.CUSTOMERCAL B 
ON A.PANNO=B.PANNO
INNER JOIN DIMSOURCEDB  C 
ON B.SOURCEALT_KEY=C.SOURCEALT_KEY  
AND C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY 
AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY 
WHERE A.SYSNPA_DT=B.SYSNPA_DT
            

UPDATE 
A 
SET 
A.SYSASSETCLASSALT_KEY=B.SYSASSETCLASSALT_KEY,
A.SYSNPA_DT=B.SYSNPA_DT  
FROM PRO.CUSTOMERCAL A INNER JOIN #TEMPTABLEPANCARD B 
ON A.PANNO=B.PANNO 

UPDATE 
A 
SET DEGREASON='PERCOLATION BY PAN CARD ' + ' ' + B.SOURCEDBNAME + '  ' + B.PANNO 
FROM PRO.CUSTOMERCAL A INNER JOIN #TEMPTABLEPANCARD B 
ON A.PANNO=B.PANNO
WHERE A.SRCASSETCLASSALT_KEY=1 
AND A.SYSASSETCLASSALT_KEY>1 
AND A.DEGREASON IS NULL 
      
END    

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE SYSASSETCLASSALT_KEY|SYSNPA_DT BY PAN NO'

/*------------------UPDATE SYSASSETCLASSALT_KEY|SYSNPA_DT BY AADHAR CARD NO------------------*/

INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE SYSASSETCLASSALT_KEY|SYSNPA_DT BY AADHARCARD NO','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

IF ISNULL(@AADHARCARDFLAG,'N')='Y'
BEGIN

IF OBJECT_ID('TEMPDB..#TEMPTABLE_ADHARCARD') IS NOT NULL
    DROP TABLE #TEMPTABLE_ADHARCARD

SELECT 
	AADHARCARDNO,
	MAX(ISNULL(SYSASSETCLASSALT_KEY,1)) SYSASSETCLASSALT_KEY ,
	MIN(SYSNPA_DT) SYSNPA_DT ,
	B.SOURCEDBNAME INTO #TEMPTABLE_ADHARCARD 
FROM PRO.CUSTOMERCAL A INNER JOIN DIMSOURCEDB  B 
ON B.SOURCEALT_KEY=A.SOURCEALT_KEY AND B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY
WHERE 
A.AADHARCARDNO IS NOT NULL AND  ISNULL(A.SYSASSETCLASSALT_KEY,1)<>1
GROUP BY  
AADHARCARDNO,B.SOURCEDBNAME


UPDATE A SET A.SYSASSETCLASSALT_KEY=B.SYSASSETCLASSALT_KEY,A.SYSNPA_DT=B.SYSNPA_DT  
FROM 
PRO.CUSTOMERCAL A INNER JOIN #TEMPTABLE_ADHARCARD B 
ON 
A.AADHARCARDNO=B.AADHARCARDNO


UPDATE A SET DEGREASON='PERCOLATION BY AADHAR CARD ' + ' ' + B.SOURCEDBNAME + '  ' + B.AADHARCARDNO 
FROM PRO.CUSTOMERCAL A INNER JOIN #TEMPTABLE_ADHARCARD B ON A.AADHARCARDNO=B.AADHARCARDNO
WHERE A. SRCASSETCLASSALT_KEY=1 AND A.SYSASSETCLASSALT_KEY>1
AND A.DEGREASON IS NULL
END    

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE SYSASSETCLASSALT_KEY|SYSNPA_DT BY AADHARCARD NO'

*/
/*-----UPDATE SplCatg Alt_Key ACCOUNT LEVEL--------------- */

INSERT INTO PRO.ProcessMonitor(UserID,Description,MODE,StartTime,EndTime,TimeKey,SetID)
SELECT ORIGINAL_LOGIN(),'SplCatg Alt_Key ACCOUNT LEVEL','RUNNING',GETDATE(),NULL,@TIMEKEY,@SetID


UPDATE A 
SET 
 A.SplCatg1Alt_Key=ISNULL(B.SplCatg1Alt_Key,0)
,A.SplCatg2Alt_Key=ISNULL(B.SplCatg2Alt_Key,0)
,A.SplCatg3Alt_Key=ISNULL(B.SplCatg3Alt_Key,0)
,A.SplCatg4Alt_Key=ISNULL(B.SplCatg4Alt_Key,0)
FROM 
	PRO.ACCOUNTCAL A INNER JOIN DBO.AdvAcOtherDetail B 
ON 
A.ACCOUNTENTITYID=B.ACCOUNTENTITYID AND B.EffectiveFromTimeKey<=@TIMEKEY  AND B.EffectiveToTimeKey>=@TIMEKEY  


UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IdentityKey = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND TIMEKEY=@TIMEKEY AND DESCRIPTION='SplCatg Alt_Key ACCOUNT LEVEL'
 
/*-----UPDATE SplCatg Alt_Key CUSTOMER LEVEL--------------- */
INSERT INTO PRO.ProcessMonitor(UserID,Description,MODE,StartTime,EndTime,TimeKey,SetID)
SELECT ORIGINAL_LOGIN(),'UPDATE SplCatg Alt_Key CUSTOMER LEVEL','RUNNING',GETDATE(),NULL,@TIMEKEY,@SetID 
UPDATE 
A SET 
A.SplCatg1Alt_Key=ISNULL(B.SplCatg1Alt_Key,0),
A.SplCatg2Alt_Key=ISNULL(B.SplCatg2Alt_Key,0),
A.SplCatg3Alt_Key=ISNULL(B.SplCatg3Alt_Key,0),
A.SplCatg4Alt_Key=ISNULL(B.SplCatg4Alt_Key,0)
FROM 
PRO.CUSTOMERCAL A INNER JOIN DBO.AdvCustOtherDetail B 
ON 
A.CUSTOMERENTITYID=B.CUSTOMERENTITYID AND B.EffectiveFromTimeKey<=@TIMEKEY AND B.EffectiveToTimeKey>=@TIMEKEY


UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IdentityKey = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE SplCatg Alt_Key CUSTOMER LEVEL'
    
      
/*----MARKING OF ALWAYS STD Account LEVEL----------------------------*/

INSERT INTO PRO.ProcessMonitor(UserID,Description,MODE,StartTime,EndTime,TimeKey,SetID)
SELECT ORIGINAL_LOGIN(),'MARKING OF ALWAYS STD Account LEVEL','RUNNING',GETDATE(),NULL,@TIMEKEY,@SetID
        
Update ACL 
SET Asset_Norm='ALWYS_STD'
FROM  PRO.AccountCal ACL
LEFT JOIN DimScheme DSE 
ON DSE.EffectiveFromTimeKey<=@TimeKey AND DSE.EffectiveToTimeKey >=@TimeKey AND ACL.SchemeAlt_Key = DSE.SchemeAlt_Key 
 
LEFT JOIN DimAcSplCategory DAS1 
ON DAS1.EffectiveFromTimeKey<=@TimeKey  AND DAS1.EffectiveToTimeKey >=@TimeKey 
												  AND ISNULL(ACL.SplCatg1Alt_Key,0) =DAS1.SplCatAlt_Key 
                  								  AND ISNULL(DAS1.AssetClass,'NORMAL')  = 'ALWYS_STD' 
LEFT JOIN DimAcSplCategory DAS2 
ON DAS2.EffectiveFromTimeKey<=@TimeKey 
                                                  AND DAS2.EffectiveToTimeKey >=@TimeKey
                                                  AND ISNULL(ACL.SplCatg2Alt_Key,0) =DAS2.SplCatAlt_Key
                                                  AND ISNULL(DAS2.AssetClass,'NORMAL')  = 'ALWYS_STD'
LEFT JOIN DimAcSplCategory DAS3 
ON    DAS3.EffectiveFromTimeKey<=@TimeKey 
                                                  AND DAS3.EffectiveToTimeKey >=@TimeKey
                                                  AND ISNULL(ACL.SplCatg3Alt_Key,0) =DAS3.SplCatAlt_Key 
                                                  AND ISNULL(DAS3.AssetClass,'NORMAL')  = 'ALWYS_STD' 
LEFT OUTER  JOIN DimAcSplCategory DAS4 
ON    DAS4.EffectiveFromTimeKey<=@TimeKey 
                                                  AND DAS4.EffectiveToTimeKey >=@TimeKey
                                                  AND ISNULL(ACL.SplCatg4Alt_Key,0) =DAS4.SplCatAlt_Key 
                                                  AND ISNULL(DAS4.AssetClass,'NORMAL')  = 'ALWYS_STD'                                                                                                                         
LEFT JOIN DIMPRODUCT P 
ON P.ProductAlt_Key=ACL.ProductAlt_Key AND P.EffectiveFromTimeKey<=@TIMEKEY AND P.EffectiveToTimeKey >=@TIMEKEY

WHERE  (	 (ISNULL(DSE.AssetClass,'NORMAL')     =    'ALWYS_STD') 
			 OR (ISNULL(DAS1.AssetClass,'NORMAL') =    'ALWYS_STD')
             OR (ISNULL(DAS2.AssetClass,'NORMAL') =    'ALWYS_STD')
             OR (ISNULL(DAS3.AssetClass,'NORMAL') =    'ALWYS_STD')
             OR (ISNULL(DAS4.AssetClass,'NORMAL') =    'ALWYS_STD')) 
             OR (ISNULL(P.AssetClass,'NORMAL')    =    'ALWYS_STD')
        

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IdentityKey = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND TIMEKEY=@TIMEKEY AND DESCRIPTION='MARKING OF ALWAYS STD Account LEVEL'

/*--------Marking  Always NPA account table level----------------*/
INSERT INTO PRO.ProcessMonitor(UserID,Description,MODE,StartTime,EndTime,TimeKey,SetID)
SELECT ORIGINAL_LOGIN(),'marking  always NPA account table level','RUNNING',GETDATE(),NULL,@TIMEKEY,@SetID
       
Update ACL 
set Asset_Norm='ALWYS_NPA'
FROM  PRO.AccountCal ACL
LEFT JOIN DimScheme DSE ON DSE.EffectiveFromTimeKey<=@TimeKey 
                                  AND DSE.EffectiveToTimeKey >=@TimeKey
                                  AND ACL.SchemeAlt_Key = DSE.SchemeAlt_Key 
 
LEFT JOIN DimAcSplCategory DAS1 ON DAS1.EffectiveFromTimeKey<=@TimeKey 
                                                  AND DAS1.EffectiveToTimeKey >=@TimeKey
                                                            AND ISNULL(ACL.SplCatg1Alt_Key,0) =DAS1.SplCatAlt_Key 
                                              AND ISNULL(DAS1.AssetClass,'NORMAL')  = 'ALWYS_NPA' 
LEFT JOIN  DimAcSplCategory DAS2 ON DAS2.EffectiveFromTimeKey<=@TimeKey 
                                                   AND DAS2.EffectiveToTimeKey >=@TimeKey
                                                             AND ISNULL(ACL.SplCatg2Alt_Key,0) =DAS2.SplCatAlt_Key
                                               AND ISNULL(DAS2.AssetClass,'NORMAL')  = 'ALWYS_NPA'
LEFT JOIN DimAcSplCategory DAS3 ON    DAS3.EffectiveFromTimeKey<=@TimeKey 
                                                  AND DAS3.EffectiveToTimeKey >=@TimeKey
                                                            AND ISNULL(ACL.SplCatg3Alt_Key,0) =DAS3.SplCatAlt_Key 
                                              AND ISNULL(DAS3.AssetClass,'NORMAL')  = 'ALWYS_NPA' 
LEFT JOIN DimAcSplCategory DAS4 ON    DAS4.EffectiveFromTimeKey<=@TimeKey 
                                                  AND DAS4.EffectiveToTimeKey >=@TimeKey
                                                            AND ISNULL(ACL.SplCatg4Alt_Key,0) =DAS4.SplCatAlt_Key 
                                              AND ISNULL(DAS4.AssetClass,'NORMAL')  = 'ALWYS_NPA'                                                                    
WHERE (
			(ISNULL(DSE.AssetClass,'NORMAL')  = 'ALWYS_NPA') 
		OR  (ISNULL(DAS1.AssetClass,'NORMAL')  = 'ALWYS_NPA')
		OR  (ISNULL(DAS2.AssetClass,'NORMAL')  = 'ALWYS_NPA')
		OR  (ISNULL(DAS3.AssetClass,'NORMAL')  = 'ALWYS_NPA')
		OR  (ISNULL(DAS4.AssetClass,'NORMAL')  = 'ALWYS_NPA')
	 )


UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IdentityKey = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND TIMEKEY=@TIMEKEY AND DESCRIPTION='marking  always NPA account table level'
    


/*-----------------marking  always STD CUSTOMER  level------------*/ 

INSERT INTO PRO.ProcessMonitor(UserID,Description,MODE,StartTime,EndTime,TimeKey,SetID)
SELECT ORIGINAL_LOGIN(),'marking  always STD CUSTOMER  level','RUNNING',GETDATE(),NULL,@TIMEKEY,@SetID
  
  
Update A  
SET Asset_Norm='ALWYS_STD'
FROM  PRO.CustomerCal A 
LEFT  JOIN DimConstitution DCO ON DCO.EffectiveFromTimeKey<=@TimeKey 
                                        AND DCO.EffectiveToTimeKey >=@TimeKey
                                            AND A.ConstitutionAlt_Key = DCO.ConstitutionAlt_Key
LEFT  JOIN DimSplCategory DAS1 ON DAS1.EffectiveFromTimeKey<=@TimeKey 
                                           AND DAS1.EffectiveToTimeKey >=@TimeKey
                                               AND A.SplCatg1Alt_Key = DAS1.SplCatAlt_Key 
LEFT OUTER  JOIN DimSplCategory DAS2 ON DAS2.EffectiveFromTimeKey<=@TimeKey 
                                                AND DAS2.EffectiveToTimeKey >=@TimeKey
                                                    AND A.SplCatg2Alt_Key  = DAS2.SplCatAlt_Key 
LEFT OUTER  JOIN DimSplCategory DAS3 ON DAS3.EffectiveFromTimeKey<=@TimeKey 
                                                AND DAS3.EffectiveToTimeKey >=@TimeKey
                                                    AND A.SplCatg3Alt_Key  = DAS3.SplCatAlt_Key 
LEFT OUTER   JOIN DimSplCategory DAS4 ON DAS4.EffectiveFromTimeKey<=@TimeKey 
                                                AND DAS4.EffectiveToTimeKey >=@TimeKey
                                                    AND A.SplCatg4Alt_Key  = DAS4.SplCatAlt_Key 
WHERE 
     ((ISNULL(DCO.AssetClass,'NORMAL') = 'ALWYS_STD') 
  OR (ISNULL(DAS1.AssetClass,'NORMAL')  = 'ALWYS_STD') 
  OR (ISNULL(DAS2.AssetClass,'NORMAL')  = 'ALWYS_STD') 
  OR (ISNULL(DAS3.AssetClass,'NORMAL')  = 'ALWYS_STD' 
  OR  ISNULL(DAS4.AssetClass,'NORMAL')  = 'ALWYS_STD'))

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IdentityKey = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND TIMEKEY=@TIMEKEY AND DESCRIPTION='marking  always STD CUSTOMER  level'

/*---marking  always NPA CUSTOMER table level------------*/

INSERT INTO PRO.ProcessMonitor(UserID,Description,MODE,StartTime,EndTime,TimeKey,SetID)
SELECT ORIGINAL_LOGIN(),'marking  always NPA CUSTOMER table level','RUNNING',GETDATE(),NULL,@TIMEKEY,@SetID
  
UPDATE A  
SET Asset_Norm='ALWYS_NPA'
FROM PRO.CustomerCal A 
LEFT JOIN DimConstitution DCO ON (DCO.EffectiveFromTimeKey<=@TimeKey 
                                        AND DCO.EffectiveToTimeKey >=@TimeKey)
                                        AND A.ConstitutionAlt_Key =DCO.ConstitutionAlt_Key
LEFT JOIN DimSplCategory DAS1 ON (DAS1.EffectiveFromTimeKey<=@TimeKey 
                                        AND DAS1.EffectiveToTimeKey >=@TimeKey)
                                        AND A.SplCatg1Alt_Key  = DAS1.SplCatAlt_Key 
LEFT JOIN DimSplCategory DAS2 ON (DAS2.EffectiveFromTimeKey<=@TimeKey 
                                        AND DAS2.EffectiveToTimeKey >=@TimeKey)
                                        AND A.SplCatg2Alt_Key  = DAS2.SplCatAlt_Key 
LEFT JOIN DimSplCategory DAS3 ON (DAS3.EffectiveFromTimeKey<=@TimeKey 
                                        AND DAS3.EffectiveToTimeKey >=@TimeKey)
                                        AND A.SplCatg3Alt_Key  = DAS3.SplCatAlt_Key 
LEFT JOIN DimSplCategory DAS4 ON (DAS4.EffectiveFromTimeKey<=@TimeKey 
                                        AND DAS4.EffectiveToTimeKey >=@TimeKey)
                                        AND A.SplCatg4Alt_Key  = DAS4.SplCatAlt_Key 
WHERE ((ISNULL(DCO.AssetClass,'NORMAL')  = 'ALWYS_NPA') 
  OR   (ISNULL(DAS1.AssetClass,'NORMAL')  = 'ALWYS_NPA') 
  OR   (ISNULL(DAS2.AssetClass,'NORMAL')  = 'ALWYS_NPA') 
  OR   (ISNULL(DAS3.AssetClass,'NORMAL')  = 'ALWYS_NPA' 
  OR    ISNULL(DAS4.AssetClass,'NORMAL')  = 'ALWYS_NPA'))

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IdentityKey = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND TIMEKEY=@TIMEKEY AND DESCRIPTION='marking  always NPA CUSTOMER table level'
    

 /*----UPDATE ACCOUNTS WHOSE CUSTOMER IS IN ALWAYS STANDAED CATEGORY---------------*/

INSERT INTO PRO.ProcessMonitor(UserID,Description,MODE,StartTime,EndTime,TimeKey,SetID)
SELECT ORIGINAL_LOGIN(),'UPDATE Accounts whose customer is in always standaed category','RUNNING',GETDATE(),NULL,@TIMEKEY,@SetID

UPDATE ABD SET Asset_Norm='ALWYS_STD'
FROM PRO.AccountCal  ABD
INNER HASH JOIN PRO.CustomerCal  CBD ON ABD.CustomerEntityId=CBD.CustomerEntityID
WHERE CBD.Asset_Norm='ALWYS_STD'

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IdentityKey = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE Accounts whose customer is in always standaed category'
   
 /*----UPDATE ACCOUNTS WHOSE CUSTOMER IS IN ALWAYS NPA CATEGORY--------------------*/

INSERT INTO PRO.ProcessMonitor(UserID,Description,MODE,StartTime,EndTime,TimeKey,SetID)
SELECT ORIGINAL_LOGIN(),'UPDATE Accounts whose customer is in always NPA category','RUNNING',GETDATE(),NULL,@TIMEKEY,@SetID
 
UPDATE ABD SET Asset_Norm='ALWYS_NPA'
FROM PRO.AccountCal  ABD
INNER HASH JOIN PRO.CustomerCal CBD ON ABD.CustomerEntityId=CBD.CustomerEntityID
WHERE CBD.Asset_Norm='ALWYS_NPA'
AND ABD.Asset_Norm<>'ALWYS_STD' 

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IdentityKey = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE Accounts whose customer is in always NPA category'
  
  
/*-------CurrAssetClassAlt_Key update in Account Cal from customer Cal systemAssetclassalt_key--------*/
INSERT INTO PRO.ProcessMonitor(UserID,Description,MODE,StartTime,EndTime,TimeKey,SetID)
SELECT ORIGINAL_LOGIN(),'CurrAssetClassAlt_Key update in Account Cal from customer Cal systemAssetclassalt_key','RUNNING',GETDATE(),NULL,@TIMEKEY,@SetID

IF ISNULL(@HistTimeKey,0)=0
BEGIN
UPDATE A 
SET  A.INITIALASSETCLASSALT_KEY=  ISNULL(c.Cust_AssetClassAlt_Key,1)
    ,A.PrvAssetClassAlt_Key=      ISNULL(C.Cust_AssetClassAlt_Key,1)
    ,A.InitialNpaDt=              ISNULL(C.NPADt,null)
FROM PRO.ACCOUNTCAL A  INNER JOIN dbo.AdvCustNPAdetail C
ON C.CustomerEntityId=A.CustomerEntityId AND (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY)
END

ELSE
BEGIN
UPDATE A SET  A.INITIALASSETCLASSALT_KEY=isnull(c.FinalAssetClassAlt_Key,1)
      ,A.PrvAssetClassAlt_Key=ISNULL(C.FinalAssetClassAlt_Key,1)
      ,A.InitialNpaDt=C.FinalNpaDt
      ,A.UnserviedInt=ISNULL(c.unserviedint,0)
FROM PRO.ACCOUNTCAL A  INNER JOIN PRO.AccountCal_Hist C
ON C.AccountEntityID=A.AccountEntityID AND (C.EFFECTIVEFROMTIMEKEY<=@HistTimeKey AND C.EFFECTIVETOTIMEKEY>=@HistTimeKey) 
END

UPDATE A
SET A.FinalAssetClassAlt_Key=ISNULL(B.SysAssetClassAlt_Key,1)
FROM PRO.ACCOUNTCAL A INNER JOIN   PRO.CUSTOMERCAL  B 
ON  A.CustomerEntityID=B.CustomerEntityID AND (B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY)


UPDATE A
SET A.FinalAssetClassAlt_Key=ISNULL(B.SysAssetClassAlt_Key,1)
FROM PRO.ACCOUNTCAL A INNER  JOIN   PRO.CUSTOMERCAL  B 
ON  A.UcifEntityID=B.UcifEntityID AND (B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY)



--------------------------UCIC Level Percolation-------29022024---------------------------------------------
;with CTE_UCIF as
(
select   UcifEntityID,Max(SysAssetClassAlt_Key)SysAssetClassAlt_Key,min(SysNPA_Dt)SysNPA_Dt,
         min(DbtDt)DbtDt,min(LossDt) LossDt
from     pro.CUSTOMERCAL
where    isnull(UcifEntityID,0)>0
group by UcifEntityID
)UPDATE A SET 
	A.SrcAssetClassAlt_Key=isnull(c.SysAssetClassAlt_Key,1),
	A.SysAssetClassAlt_Key=isnull(c.SysAssetClassAlt_Key,1),
	A.SrcNPA_Dt=isnull(C.SysNPA_Dt,null),
	A.SysNPA_Dt=isnull(C.SysNPA_Dt,null),
	A.DbtDt=isnull(C.DbtDt,null),
	A.LossDt=isnull(C.LossDt,null)
	--,A.NpaTagDate=ISNULL(C.NpaTagDate,NULL)
FROM pro.CUSTOMERCAL A  LEFT hash JOIN cte_ucif C
ON C.UcifEntityID=A.UcifEntityID
 
 
UPDATE A SET  A.INITIALASSETCLASSALT_KEY=isnull(c.SrcAssetClassAlt_Key,1)
      ,A.InitialNpaDt=C.SrcNPA_Dt
      ,A.FinalAssetClassAlt_Key=isnull(c.SysAssetClassAlt_Key,1) -- AMAR ADDED ON 20042024
      ,A.FinalNpaDt=C.SysNPA_Dt -- AMAR ADDED ON 20042024
	  ,A.PrvAssetClassAlt_Key=ISNULL(C.SysAssetClassAlt_Key,1)
     ----- ,A.UnserviedInt=ISNULL(c.unserviedint,0)
FROM PRO.ACCOUNTCAL A  
	INNER JOIN pro.CUSTOMERCAL C
		ON C.CustomerEntityID=A.CustomerEntityID


/*2304204  amar added code for carryforward unservice intt*/
UPDATE A SET  
     	A.UnserviedInt=ISNULL(c.unserviedint,0)
FROM PRO.ACCOUNTCAL A  INNER JOIN pro.AccountCal_Hist C
		ON C.AccountEntityID=A.AccountEntityID
		AND c.EffectiveFromTimeKey<=@TIMEKEY and c.EffectiveToTimeKey>=@TIMEKEY
		and ISNULL(c.unserviedint,0)>0


/* not required
if @PANCARDFLAG ='Y'
BEGIN
UPDATE C 
SET C.FinalAssetClassAlt_Key=A.SYSASSETCLASSALT_KEY
                   --,C.FinalNpaDt=A.SYSNPA_DT  
FROM PRO.CUSTOMERCAL A INNER JOIN #TEMPTABLEPANCARD B 
ON A.PANNO=B.PANNO Inner JOIN Pro.ACCOUNTCAL C 
ON C.UcifEntityID=A.UcifEntityID
OPTION (MAXDOP 1)

END
*/

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IdentityKey = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND TIMEKEY=@TIMEKEY AND DESCRIPTION='CurrAssetClassAlt_Key update in Account Cal from customer Cal systemAssetclassalt_key'

/*---------UPDATE INITIALNPADT AND FINALNPADT AT ACCOUNT  LEVEL FROM CUSTOMER TO ACCOUNT------------- */

 /* Not required - update already done above
 INSERT INTO PRO.ProcessMonitor(UserID,Description,MODE,StartTime,EndTime,TimeKey,SetID)
 SELECT ORIGINAL_LOGIN(),'UPDATE InitialNpaDt AND FinalNpaDt AT Account  level from customer to account','RUNNING',GETDATE(),NULL,@TIMEKEY,@SetID
 
UPDATE A SET  A.FinalNpaDt=B.SysNPA_Dt
FROM PRO.ACCOUNTCAL  A JOIN PRO.CUSTOMERCAL B ON A.CUSTOMERENTITYID=B.CUSTOMERENTITYID

UPDATE A SET  A.FinalNpaDt=B.SysNPA_Dt
FROM PRO.ACCOUNTCAL  A JOIN PRO.CUSTOMERCAL B ON A.UcifEntityID=B.UcifEntityID

IF @PANCARDFLAG='Y'
BEGIN
UPDATE C SET C.FinalNpaDt=A.SYSNPA_DT  
FROM PRO.CUSTOMERCAL A INNER JOIN #TEMPTABLEPANCARD B ON A.PANNO=B.PANNO
Inner JOIN Pro.ACCOUNTCAL C ON C.UcifEntityID=A.UcifEntityID

END
*/


UPDATE PRO.ACCOUNTCAL SET FINALNPADT=NULL,FINALASSETCLASSALT_KEY=1
WHERE ASSET_NORM='ALWYS_STD' 


 UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IdentityKey = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE InitialNpaDt AND FinalNpaDt AT Account  level from customer to account'
 
 SELECT * FROM AdvAcPUIDetailSub 


 /*--------marking always NPA account table level where WriteOffAmount>0----------------*/
INSERT INTO PRO.ProcessMonitor(UserID,Description,MODE,StartTime,EndTime,TimeKey,SetID)
SELECT ORIGINAL_LOGIN(),'Exceptional Accounts NPA Marking','RUNNING',GETDATE(),NULL,@TIMEKEY,@SetID
       

UPDATE  ACL set 
 	 Asset_Norm='ALWYS_NPA'  
	,FinalAssetClassAlt_Key= CASE WHEN FinalAssetClassAlt_Key=1 THEN 
										(CASE WHEN B.StatusType IN('TWO','WO','OTS','SALE TO ARC') THEN 2 --SUB FOR OTHER THAN FRAUD
											  WHEN  B.StatusType='DCCO' AND isnull(B.STATUSDATE,'2099-12-31')<@ProcessingDate AND PRJ.STATUSDATE IS NULL THEN 2--ADDED FOR DCCO DATE & PROJ COMPLETION DATE BY ZAIN
													ELSE 6 END) -- LOSS FOR FRAUD
								ELSE ACL.FinalAssetClassAlt_Key
							 END
	,FinalNpaDt= CASE WHEN FinalAssetClassAlt_Key=1 THEN ISNULL(b.StatusDate,@ProcessingDate) 
						WHEN FinalAssetClassAlt_Key>1 AND b.StatusDate IS NOT NULL and FinalNpaDt>=b.StatusDate then b.StatusDate
						WHEN FinalAssetClassAlt_Key>1 AND b.StatusDate IS NOT NULL  and FinalNpaDt<b.StatusDate then FinalNpaDt
					  ELSE @ProcessingDate 
				  END           
	,NPA_Reason='NPA DUE TO '+B.StatusType+' MARKING'
	,WriteOffAmount=(CASE WHEN b.Amount is NULL then ACL.Balance else  b.Amount END)
 FROM   PRO.AccountCal ACL 
	INNER JOIN ExceptionFinalStatusType b
		on ACL.AccountEntityID=b.AccountEntityID AND b.EFFECTIVEFROMTIMEKEY<=@TIMEKEY and b.EffectiveToTimeKey>=@TIMEKEY
	LEFT JOIN ExceptionFinalStatusType PRJ
		ON ACL.AccountEntityID=PRJ.AccountEntityID AND PRJ.EFFECTIVEFROMTIMEKEY<=@TIMEKEY and PRJ.EffectiveToTimeKey>=@TIMEKEY
		AND PRJ.StatusType='PROJ COMP STATUS'
 WHERE B.StatusType IN('TWO','WO','OTS','SALE TO ARC','FRAUD','DCCO') 


UPDATE  ACL set 
 	 Asset_Norm='ALWYS_NPA'  
	,SysAssetClassAlt_Key= CASE WHEN SysAssetClassAlt_Key=1 THEN 
										(CASE WHEN B.StatusType IN('TWO','WO','OTS','SALE TO ARC') THEN 2 --SUB FOR OTHER THAN FRAUD
												WHEN  B.StatusType='DCCO' AND isnull(B.STATUSDATE,'2099-12-31')<@ProcessingDate AND PRJ.STATUSDATE IS NULL THEN 2--ADDED FOR DCCO DATE & PROJ COMPLETION DATE BY ZAIN
											ELSE 6 END) -- LOSS FOR FRAUD
								ELSE ACL.SysAssetClassAlt_Key
							 END
	,SysNPA_Dt= CASE WHEN SysAssetClassAlt_Key=1 THEN ISNULL(B.StatusDate,@ProcessingDate)  
						WHEN SysAssetClassAlt_Key>1 AND B.StatusDate IS NOT NULL and SysNPA_Dt>=B.StatusDate then B.StatusDate
						WHEN SysAssetClassAlt_Key>1 AND B.StatusDate IS NOT NULL  and SysNPA_Dt<B.StatusDate then SysNPA_Dt
					  ELSE @ProcessingDate 
				  END           
	,DegReason=	'NPA DUE TO '+B.StatusType+' MARKING'

 FROM   PRO.CUSTOMERCAL ACL INNER JOIN ExceptionFinalStatusType b
		on  ACL.RefCustomerID=b.CustomerID AND b.EFFECTIVEFROMTIMEKEY<=@TIMEKEY and b.EffectiveToTimeKey>=@TIMEKEY
	LEFT JOIN ExceptionFinalStatusType PRJ
		ON ACL.RefCustomerID=PRJ.CustomerID AND PRJ.EFFECTIVEFROMTIMEKEY<=@TIMEKEY and PRJ.EffectiveToTimeKey>=@TIMEKEY
		AND PRJ.StatusType='PROJ COMP STATUS'
 WHERE B.StatusType IN('TWO','WO','OTS','SALE TO ARC','FRAUD','DCCO') 


UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IdentityKey = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND TIMEKEY=@TIMEKEY AND DESCRIPTION='Exceptional Accounts NPA Marking'


/*--------marking always NPA account table level where WriteOffAmount>0----------------*/

-- /*---------UPDATE PrvQtrRV  AT Customer level--------------------- */     /*---TO BE REMOVE GET VALUE FROM FUNCTION*/
 
-- INSERT INTO PRO.ProcessMonitor(UserID,Description,MODE,StartTime,EndTime,TimeKey,SetID)
-- SELECT ORIGINAL_LOGIN(),'UPDATE PrvQtrRV  AT Customer level','RUNNING',GETDATE(),NULL,@TIMEKEY,@SetID
 

--IF OBJECT_ID('TEMPDB..#PRVQTRRV') IS NOT NULL
--DROP TABLE #PRVQTRRV

--DECLARE @PRVQTRRV INT =(SELECT LastQtrDateKey FROM SYSDAYMATRIX WHERE TimeKey=@TIMEKEY)

--SELECT *  
--INTO #PRVQTRRV 
--FROM dbo.AdvCustSecurityFunpre(@PRVQTRRV)
  
--UPDATE A SET A.PRVQTRRV= ISNULL(B.Total_PriSec,0)+ISNULL(B.Total_CollSec,0)  FROM PRO.CUSTOMERCAL A INNER  JOIN #PRVQTRRV B
--ON A.CUSTOMERENTITYID=B.CUSTOMERENTITYID


--UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IdentityKey = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE PrvQtrRV  AT Customer level'
 
 

  
/*---------UPDATE PRVQTRRV AT CUSTOMER LEVEL---------------------(Previous Qtr) */    
 
INSERT INTO PRO.ProcessMonitor(UserID,Description,MODE,StartTime,EndTime,TimeKey,SetID)
SELECT ORIGINAL_LOGIN(),'UPDATE PRVQTRRV AT CUSTOMER LEVEL','RUNNING',GETDATE(),NULL,@TIMEKEY,@SetID
 
IF OBJECT_ID('TEMPDB..#PRVQTRRV') IS NOT NULL
DROP TABLE #PRVQTRRV

select CustomerEntityID,CurntQtrRv
into #PRVQTRRV
from pro.CustomerCal_Hist   A
where A.EffectiveFromTimeKey<=@LastQtrDateKey and A.EffectiveToTimeKey>=@LastQtrDateKey 
and ISNULL(CurntQtrRv,0)>0 

 
UPDATE B SET PrvQtrRV=A.CurntQtrRv
FROM #PRVQTRRV A
INNER JOIN pro.CustomerCal B
ON A.CustomerEntityID=B.CustomerEntityID

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND
  DESCRIPTION='UPDATE PRVQTRRV AT CUSTOMER LEVEL'

  
--/*----UPDATE SECURITY VALUE AT ACCOUNT LEVEL------------*/
 INSERT INTO PRO.ProcessMonitor(UserID,Description,MODE,StartTime,EndTime,TimeKey,SetID)
 SELECT ORIGINAL_LOGIN(),'UPDATE SECURITY VALUE AT ACCOUNT LEVEL','RUNNING',GETDATE(),NULL,@TIMEKEY,@SetID

IF OBJECT_ID('TEMPDB..#TEMPSECURITY') IS NOT NULL
DROP TABLE #TEMPSECURITY

SELECT *  
INTO #TEMPSECURITY
FROM dbo.AdvAcSecurityFun(@TIMEKEY,'0')


UPDATE A SET A.SecurityValue= ISNULL(B.Total_PriSec,0) + ISNULL(B.Total_CollSec,0) 
FROM PRO.AccountCal A INNER  JOIN #TEMPSECURITY B
ON A.AccountEntityID=B.AccountEntityID


UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IdentityKey = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND TIMEKEY=@TIMEKEY AND DESCRIPTION='update security value at account level'

--/*---------UPDATE CurntQtrRv  AT Customer level--------------------- */ 

INSERT INTO PRO.ProcessMonitor(UserID,Description,MODE,StartTime,EndTime,TimeKey,SetID)
SELECT ORIGINAL_LOGIN(),'UPDATE CurntQtrRv  AT Customer level','RUNNING',GETDATE(),NULL,@TIMEKEY,@SetID 




IF OBJECT_ID('TEMPDB..#CurntQtrRv') IS NOT NULL
DROP TABLE #CurntQtrRv 
------SELECT *  
------INTO #CurntQtrRv 
------FROM dbo.AdvCustSecurityFun(@TIMEKEY)
select 
CustomerEntityId,
sum(CurrentValue) CurrentValue into  #CurntQtrRv
from 
AdvSecurityDetail a inner join AdvSecurityValueDetail b
on 
	a.EffectiveFromTimeKey<=@TIMEKEY 
and a.EffectiveToTimeKey>=@TIMEKEY
and b.EffectiveFromTimeKey<=@TIMEKEY 
and b.EffectiveToTimeKey>=@TIMEKEY
and a.SecurityEntityID=b.SecurityEntityID
group by CustomerEntityId




UPDATE A 
SET 
A.CurntQtrRv=CurrentValue-- ISNULL(B.Total_PriSec,0)+ISNULL(B.Total_CollSec,0) 
FROM 
PRO.CUSTOMERCAL A INNER  JOIN #CurntQtrRv B
ON 
A.CUSTOMERENTITYID=B.CUSTOMERENTITYID



UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IdentityKey = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE CurntQtrRv  AT Customer level'
 
---   --/*----UPDATE SECURITY FLAG WHERE SECURITY AT CUSTOMER LEVEL BUT  SecApp UNSECURED AT ACCOUNT LEVEL------------*/
 INSERT INTO PRO.ProcessMonitor(UserID,Description,MODE,StartTime,EndTime,TimeKey,SetID)
 SELECT ORIGINAL_LOGIN(),'UPDATE SECURITY FLAG WHERE SECURITY AT CUSTOMER LEVEL BUT  SecApp UNSECURED AT ACCOUNT LEVEL','RUNNING',GETDATE(),NULL,@TIMEKEY,@SetID


  /* NEED TO CHANGE FOR UTKS */ 

 update PRO.AccountCal set SecApp=FlgSecured

UPDATE B SET FlgSecured='D'
FROM  PRO.AccountCal B
 INNER JOIN PRO.CUSTOMERCAL a
 ON A.CustomerEntityID =B.CustomerEntityID
 WHERE ISNULL(CurntQtrRv,0)>0
 AND B.SecApp='S'
 AND ISNULL(B.BALANCE,0)>0 



UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IdentityKey = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE SECURITY FLAG WHERE SECURITY AT CUSTOMER LEVEL BUT  SecApp UNSECURED AT ACCOUNT LEVEL'

/*----UPDATE FLGABINITIO MARK AT ACCOUNT LEVEL---------*/ 

INSERT INTO PRO.ProcessMonitor(UserID,Description,MODE,StartTime,EndTime,TimeKey,SetID)
SELECT ORIGINAL_LOGIN(),'update FlgAbinitio MARK at account level','RUNNING',GETDATE(),NULL,@TIMEKEY,@SetID
 

UPDATE A SET A.FlgAbinitio='Y'
FROM PRO.AccountCal A 
inner join ExceptionFinalStatusType b on a.customeracid=b.acid
where (B.EffectiveFromTimeKey<=@TIMEKEY AND B.EffectiveToTimeKey>=@TIMEKEY)
and b.StatusType=(select ParameterShortNameEnum from dimparameter where DimParameterName='UploadFLagType' and
ParameterShortNameEnum='Ab-Initio'
and EffectiveFromTimeKey<=@TIMEKEY AND EffectiveToTimeKey>=@TIMEKEY)


UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IdentityKey = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND TIMEKEY=@TIMEKEY AND DESCRIPTION='update FlgAbinitio MARK at account level'
/*----UPDATE FLGFITL MARK AT ACCOUNT LEVEL------------*/


INSERT INTO PRO.ProcessMonitor(UserID,Description,MODE,StartTime,EndTime,TimeKey,SetID)
SELECT ORIGINAL_LOGIN(),'update FlgFITL MARK at account level','RUNNING',GETDATE(),NULL,@TIMEKEY,@SetID

UPDATE A  
SET A.FLGFITL='Y'
FROM PRO.ACCOUNTCAL A 
WHERE (ISNULL(A.SplCatg1Alt_Key,0)=755 OR ISNULL(A.SplCatg2Alt_Key,0)=755 OR ISNULL(A.SplCatg3Alt_Key,0)=755  OR ISNULL(A.SplCatg4Alt_Key,0)=755)
 
UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE  IdentityKey = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND TIMEKEY=@TIMEKEY AND DESCRIPTION='update FlgFITL MARK at account level'
   

   
/*------------------UPDATE OVERDUESINCEDT FROM BILL DETAIL TABLE------------------*/

INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID)
SELECT ORIGINAL_LOGIN(),'UPDATE OVERDUESINCEDT FROM BILL DETAIL TABLE ','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID



IF OBJECT_ID('TEMPDB..#BILL_OVERDUE') IS NOT NULL
    DROP TABLE #BILL_OVERDUE

SELECT AccountEntityID,BILLENTITYID, BALANCE,
      CASE WHEN ISNULL(BILLDUEDT,'1900-01-01')>ISNULL(BillExtendedDueDt,'1900-01-01') 
                  THEN BillDueDt 
                  ELSE BillExtendedDueDt END BILLDUEDT
      ---MIN(BILLDUEDT) BILLDUEDT,MIN(BillExtendedDueDt) BillExtendedDueDt 
      INTO #BILL_OVERDUE
FROM DBO.ADVFACBILLDETAIL 
WHERE EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND EFFECTIVETOTIMEKEY>=@TIMEKEY 
      AND ISNULL(BALANCE,0)>0
      AND  (CASE WHEN ISNULL(BILLDUEDT,'1900-01-01')>ISNULL(BillExtendedDueDt,'1900-01-01') 
                  THEN BillDueDt 
                  ELSE BillExtendedDueDt END
             )<=@PROCESSINGDATE


IF OBJECT_ID('TEMPDB..#BILL_OVERDUE_FINAL') IS NOT NULL
    DROP TABLE #BILL_OVERDUE_FINAL

SELECT AccountEntityId,SUM(BALANCE) BILOVERDUE,MIN(BILLDUEDT) BILLOVERDUEDT
      INTO #BILL_OVERDUE_FINAL
FROM #BILL_OVERDUE GROUP BY AccountEntityId

UPDATE PRO.ACCOUNTCAL SET OVERDUESINCEDT=B.BILLOVERDUEDT ,OverdueAmt  =B.BILOVERDUE
FROM  PRO.ACCOUNTCAL A 
INNER JOIN #BILL_OVERDUE_FINAL B
      ON A.AccountEntityID =B.AccountEntityId


IF OBJECT_ID('TEMPDB..#PC_OVERDUE') IS NOT NULL
    DROP TABLE #PC_OVERDUE
      SELECT AccountEntityID,PCRefNo, BALANCE,
      CASE WHEN ISNULL(PCDueDt,'1900-01-01')>ISNULL(PCExtendedDueDt,'1900-01-01') 
                  THEN PCDueDt 
                  ELSE PCExtendedDueDt END PCOVERDUEDUEDT
      ---MIN(BILLDUEDT) BILLDUEDT,MIN(BillExtendedDueDt) BillExtendedDueDt 
      INTO #PC_OVERDUE
FROM DBO.AdvFacPCDetail 
WHERE EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND EFFECTIVETOTIMEKEY>=@TIMEKEY 
      AND ISNULL(BALANCE,0)>0
      AND  (CASE WHEN ISNULL(PCDueDt,'1900-01-01')>ISNULL(PCExtendedDueDt,'1900-01-01') 
                  THEN PCDueDt 
                  ELSE PCExtendedDueDt END
             )<=@PROCESSINGDATE

IF OBJECT_ID('TEMPDB..#PC_OVERDUE_FINAL') IS NOT NULL
    DROP TABLE #PC_OVERDUE_FINAL

SELECT AccountEntityId,SUM(BALANCE) PCOVERDUE,MIN(PCOVERDUEDUEDT) PCOVERDUEDUEDT
      INTO #PC_OVERDUE_FINAL
FROM #PC_OVERDUE GROUP BY AccountEntityId

UPDATE PRO.ACCOUNTCAL SET OVERDUESINCEDT=B.PCOVERDUEDUEDT,OverdueAmt=B.PCOVERDUE
FROM  PRO.ACCOUNTCAL A 
INNER JOIN #PC_OVERDUE_FINAL B ON A.AccountEntityID =B.AccountEntityId 



--IF OBJECT_ID('TEMPDB..#NF_BALANCE') IS NOT NULL
--    DROP TABLE #NF_BALANCE

--SELECT AccountEntityID, SUM(ISNULL(BALANCE,0)) AS BALANCE,SUM(ISNULL(BalanceInCurrency,0)) AS BalanceInCurrency
            
--      INTO #NF_BALANCE
--FROM DBO.AdvFacNFDetail 
--WHERE EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND EFFECTIVETOTIMEKEY>=@TIMEKEY 
--            GROUP BY AccountEntityID


--UPDATE PRO.ACCOUNTCAL SET BALANCE=B.BALANCE,BalanceInCrncy=B.BalanceInCurrency
--FROM  PRO.ACCOUNTCAL A 
--INNER JOIN #NF_BALANCE B
--      ON A.AccountEntityID =B.AccountEntityId


      

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE OVERDUESINCEDT FROM BILL DETAIL TABLE'



/*-----UPDATE COVERGOVGUR BILL AT ACCOUNT LEVEL-------------------*/
INSERT INTO PRO.ProcessMonitor(UserID,Description,MODE,StartTime,EndTime,TimeKey,SetID)
SELECT ORIGINAL_LOGIN(),'UPDATE CoverGovGur BILL AT ACCOUNT LEVEL','RUNNING',GETDATE(),NULL,@TIMEKEY,@SetID

UPDATE  A SET A.COVERGOVGUR =C.COVERGOVGUR FROM PRO.ACCOUNTCAL A 
INNER  JOIN(
SELECT A.ACCOUNTENTITYID,SUM(ISNULL(ISNULL(CLAIMCOVERAMT,0)+ ISNULL(CLAIMRECEIVEDAMT,0),0)) COVERGOVGUR FROM DBO.ADVFACBILLDETAIL A
INNER  JOIN PRO.ACCOUNTCAL  B ON A.ACCOUNTENTITYID=B.ACCOUNTENTITYID
WHERE  (A.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND A.EFFECTIVETOTIMEKEY>=@TIMEKEY)
GROUP BY A.ACCOUNTENTITYID)  C ON A.ACCOUNTENTITYID=C.ACCOUNTENTITYID

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE  IdentityKey = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE CoverGovGur BILL AT ACCOUNT LEVEL'
   
/*-----UPDATE COVERGOVGUR PC AT ACCOUNT LEVEL-------------------*/
INSERT INTO PRO.ProcessMonitor(UserID,Description,MODE,StartTime,EndTime,TimeKey,SetID)
SELECT ORIGINAL_LOGIN(),'UPDATE CoverGovGur PC AT ACCOUNT LEVEL','RUNNING',GETDATE(),NULL,@TIMEKEY,@SetID

UPDATE  A SET A.COVERGOVGUR =C.COVERGOVGUR FROM PRO.ACCOUNTCAL A 
INNER  JOIN(
SELECT A.ACCOUNTENTITYID,SUM(ISNULL(ISNULL(CLAIMCOVERAMT,0)+ ISNULL(CLAIMRECEIVEDAMT,0),0)) COVERGOVGUR
 FROM DBO.ADVFACPCDETAIL A
INNER  JOIN PRO.ACCOUNTCAL  B ON A.ACCOUNTENTITYID=B.ACCOUNTENTITYID
WHERE  (A.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND A.EFFECTIVETOTIMEKEY>=@TIMEKEY)
GROUP BY A.ACCOUNTENTITYID)  C ON A.ACCOUNTENTITYID=C.ACCOUNTENTITYID

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IdentityKey = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE CoverGovGur PC AT ACCOUNT LEVEL'
   
/*-----UPDATE COVERGOVGUR DL AT ACCOUNT LEVEL-------------------*/
INSERT INTO PRO.ProcessMonitor(UserID,Description,MODE,StartTime,EndTime,TimeKey,SetID)
SELECT ORIGINAL_LOGIN(),'UPDATE CoverGovGur DL AT ACCOUNT LEVEL','RUNNING',GETDATE(),NULL,@TIMEKEY,@SetID

UPDATE A SET A.CoverGovGur=ISNULL(ISNULL(CLAIMCOVERAMT,0)+ ISNULL(CLAIMRECEIVEDAMT,0),0)
FROM PRO.ACCOUNTCAL A INNER  JOIN DBO.ADVFACDLDETAIL B
ON A.ACCOUNTENTITYID=B.ACCOUNTENTITYID
WHERE ISNULL(ISNULL(CLAIMCOVERAMT,0)+ ISNULL(CLAIMRECEIVEDAMT,0),0)>0
AND (B.EffectiveFromTimeKey<=@timekey and B.EffectiveToTimeKey>=@timekey)

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IdentityKey = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE CoverGovGur DL AT ACCOUNT LEVEL'
   
/*-----UPDATE COVERGOVGUR CC AT ACCOUNT LEVEL-------------------*/
INSERT INTO PRO.ProcessMonitor(UserID,Description,MODE,StartTime,EndTime,TimeKey,SetID)
SELECT ORIGINAL_LOGIN(),'UPDATE CoverGovGur CC AT ACCOUNT LEVEL','RUNNING',GETDATE(),NULL,@TIMEKEY,@SetID

UPDATE A SET A.CoverGovGur=ISNULL(ISNULL(CLAIMCOVERAMT,0)+ ISNULL(CLAIMRECEIVEDAMT,0),0)
FROM PRO.ACCOUNTCAL A INNER  JOIN DBO.AdvFacCCDetail B
ON A.ACCOUNTENTITYID=B.ACCOUNTENTITYID
WHERE ISNULL(ISNULL(CLAIMCOVERAMT,0)+ ISNULL(CLAIMRECEIVEDAMT,0),0)>0
AND (B.EffectiveFromTimeKey<=@timekey and B.EffectiveToTimeKey>=@timekey)

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE  IdentityKey = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE CoverGovGur CC AT ACCOUNT LEVEL'
  
  
  /*---------UPDATE DEMAND DATA-------------*/
INSERT INTO PRO.ProcessMonitor(UserID,Description,MODE,StartTime,EndTime,TimeKey,SetID)
SELECT ORIGINAL_LOGIN(),'UPDATE DEMAND DATA','RUNNING',GETDATE(),NULL,@TIMEKEY,@SetID

EXEC CCOD_InttDemandService @DATE=@PROCESSINGDATE

EXEC [PRO].[UpdateCADCADURefBalRecovery] @TimeKey=@TimeKey

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IdentityKey = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE DEMAND DATA'


/*------------------UPDATE INTSERVICESDT IN PRO.ACCOUNTCAL------------------*/
UPDATE A SET A.InttServiced='N'  
      ,A.INTNOTSERVICEDDT= DATEADD(DAY,-89,@PROCESSINGDATE)  
   FROM PRO.ACCOUNTCAL A   
   INNER JOIN DimProduct C  ON A.ProductAlt_Key=C.ProductAlt_Key   
   INNER JOIN #AdvAcBasicDetail  ABD  
    ON --(ABD.EffectiveFromTimeKey<=@TIMEKEY AND ABD.EffectiveToTimeKey>=@TIMEKEY)  
    ---AND 
	ABD.AccountEntityId=A.AccountEntityID  
   WHERE ISNULL(A.Balance,0)>0  AND ISNULL(A.CurQtrCredit,0)<ISNULL(A.CurQtrInt,0)   
   AND  A.FacilityType IN('CC','OD')  
   /* REMOVED CONDITION FOR FirstDtOfDisb AS DISCUSSED WITH SHARMA SIR ON 04102021*/  
   AND (Asset_Norm<>'ALWYS_STD' )  
   ----AND (DATEADD(DAY,90,A.FirstDtOfDisb)<@PROCESSINGDATE AND A.FirstDtOfDisb IS NOT NULL AND Asset_Norm<>'ALWYS_STD' )  
   AND C.EffectiveFromTimeKey<=@timekey AND C.EffectiveToTimeKey>=@timekey  
   ----AND C.NPANorms='DPD91'  
   ----AND ABD.ReferencePeriod=91  
  
   UPDATE A SET A.InttServiced='N',INTNOTSERVICEDDT=NULL  
   FROM PRO.ACCOUNTCAL A   
   INNER JOIN DimProduct C  ON A.ProductAlt_Key=C.ProductAlt_Key   
   INNER JOIN #AdvAcBasicDetail  ABD  
    ON--- (ABD.EffectiveFromTimeKey<=@TIMEKEY AND ABD.EffectiveToTimeKey>=@TIMEKEY)  
    ---AND
	ABD.AccountEntityId=A.AccountEntityID  
   WHERE   A.FacilityType IN('CC','OD')  
   AND (DATEADD(DAY,89,isnull(A.DebitSinceDt,AcOpenDt))>@PROCESSINGDATE AND isnull(A.DebitSinceDt,AcOpenDt) IS NOT NULL AND Asset_Norm<>'ALWYS_STD' )  
   AND C.EffectiveFromTimeKey<=@timekey AND C.EffectiveToTimeKey>=@timekey  
   --AND C.NPANorms='DPD91'  
   AND InttServiced='N'  
  ---- AND ABD.ReferencePeriod=91   ---need to exclude agri condition

    
  ----for agriculture need to update condition
UPDATE A SET A.InttServiced='N',INTNOTSERVICEDDT=OverdueIntDt  
FROM PRO.ACCOUNTCAL A   
  
  
 INNER JOIN DimProduct C  ON A.ProductAlt_Key=C.ProductAlt_Key   
 INNER JOIN #AdvAcBasicDetail  ABD  
  ON --(ABD.EffectiveFromTimeKey<=@TIMEKEY AND ABD.EffectiveToTimeKey>=@TIMEKEY)  
  --AND 
  ABD.AccountEntityId=A.AccountEntityID  
 INNER JOIN #AdvAcBalanceDetail  BAL  
  ON ---(BAL.EffectiveFromTimeKey<=@TIMEKEY AND BAL.EffectiveToTimeKey>=@TIMEKEY)  
  ---AND 
  BAL.AccountEntityId=A.AccountEntityID  
WHERE   A.FacilityType IN('CC','OD')  
AND (DATEADD(DAY,90,isnull(A.DebitSinceDt,AcOpenDt))>@PROCESSINGDATE AND isnull(A.DebitSinceDt,AcOpenDt) IS NOT NULL AND Asset_Norm<>'ALWYS_STD' )  
AND C.EffectiveFromTimeKey<=@timekey AND C.EffectiveToTimeKey>=@timekey  
--AND C.NPANorms='DPD91'  
--AND InttServiced='N'  
----AND ABD.ReferencePeriod IN(366,181)  ---need to update agri condition
and c.Agrischeme='Y'  

   /* 23042024 - AMAR BELOW CODE COMMENTED -THIS IS WRONG WE WILL CALCULATE UNAPPLIED INTT IN UPGRADE sp AS PROVIDED BY BANK IN ACCOUNT TEMPLATE AND WE ARE KEEPING BALANCEDEATIL TABLE */ 
/*
--***********************
--  credit After Npa Date
--***********************
;WITH CTE_Credit(TxnAmount,AccountEntityID)
 AS
      (

            SELECT SUM(ISNULL(TxnAmount,0)),A.AccountEntityID
            FROM AcDailyTxnDetail A 
            INNER JOIN PRO.AccountCal B ON A.AccountEntityID=B.AccountEntityID 
            INNER JOIN DimProduct C  ON B.ProductAlt_Key=C.ProductAlt_Key 
            and C.EffectiveFromTimeKey<=@timekey AND C.EffectiveToTimeKey>=@timekey 
            WHERE  TxnType='CREDIT' AND TxnSubType='RECOVERY' 
                  AND TxnDate >FinalNpaDt
                  AND isnull(C.ProductSubGroup,'N') NOT in('Agri Busi','Agri TL','KCC')
                  AND FinalAssetClassAlt_Key>1
                  AND  TrueCredit='Y' and isnull(TxnAmount,0)>0
            GROUP BY A.AccountEntityID
            
      )
UPDATE FCC 
SET CurQtrCredit= PQC.TxnAmount
FROM PRO.AccountCal FCC 
INNER JOIN CTE_Credit PQC
ON FCC.AccountEntityID=PQC.AccountEntityID 



--***********************
--  Interest After Npa Date
--***********************
   
			;WITH CTE_Interest(TxnAmount,AccountEntityID)
			  AS
      			  (SELECT SUM(ISNULL(TxnAmount,0)), A.AccountEntityID 
            			FROM AcDailyTxnDetail A
            			INNER JOIN PRO.AccountCal B ON A.AccountEntityID=B.AccountEntityID
            			INNER JOIN DimProduct C  ON B.ProductAlt_Key=C.ProductAlt_Key 
            			and C.EffectiveFromTimeKey<=@timekey AND C.EffectiveToTimeKey>=@timekey 
            			WHERE  TxnType='DEBIT' AND TxnSubType='INTEREST' 
            			AND TxnDate >FinalNpaDt
            			AND FinalAssetClassAlt_Key>1
            			AND isnull(C.ProductSubGroup,'N') NOT in('Agri Busi','Agri TL','KCC')
            			AND  TrueCredit='Y' and isnull(TxnAmount,0)>0
            			GROUP BY A.AccountEntityID
            
      			  )
			UPDATE FCC 
			SET CurQtrInt= PQC.TxnAmount
			FROM PRO.AccountCal FCC 
			INNER JOIN CTE_Interest PQC ON FCC.AccountEntityID=PQC.AccountEntityID
	*/


UPDATE A SET A.InttServiced=NULL
FROM PRO.ACCOUNTCAL A 
INNER JOIN DimProduct C  ON A.ProductAlt_Key=C.ProductAlt_Key 
WHERE   A.FacilityType IN('CC','OD')
AND (DATEADD(DAY,90,A.DebitSinceDt)>@PROCESSINGDATE AND A.DebitSinceDt IS NOT NULL AND Asset_Norm<>'ALWYS_STD' )
AND C.EffectiveFromTimeKey<=@timekey AND C.EffectiveToTimeKey>=@timekey
AND isnull(C.ProductSubGroup,'N') NOT in('Agri Busi','Agri TL','KCC')
AND InttServiced='N'


update pro.ACCOUNTCAL set UnserviedInt=0 where isnull(CurQtrCredit,0)>=(isnull(CurQtrInt,0)+isnull(UnserviedInt,0))
											AND FinalAssetClassAlt_Key =1	---ADDED BY AMAR 23042024 FOR UPDATED UNSERVICE INTT ONLY FOR STD ACCOUNTS FOR EXISTING NPA ACCOUNTS ALREADY BEING CARRY FORWARD ABOVE

UPDATE A SET A.OVERDUEAMT=B.DEMANDAMT
            ,A.INTNOTSERVICEDDT=B.DEMANDDATE
        FROM PRO.ACCOUNTCAL A  INNER JOIN DimProduct C 
 ON A.ProductAlt_Key=C.ProductAlt_Key 
INNER JOIN 
(
SELECT  AccountEntityID ,SUM(BalanceDemand) DEMANDAMT,MIN(DemandOverDueDate) DEMANDDATE 
FROM CurDat.AdvAcDemandDetail
where EffectiveFromTimeKey<=@timekey AND EffectiveToTimeKey>=@timekey
and ISNULL(BalanceDemand,0) > 0
GROUP BY AccountEntityID
) B  ON A.AccountEntityID=B.AccountEntityID 
AND C.EffectiveFromTimeKey<=@timekey AND C.EffectiveToTimeKey>=@timekey
AND C.ProductSubGroup  in('Agri Busi','Agri TL','KCC')

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE INTNOTSERVICEDDT IN PRO.ACCOUNTCAL'


/*-----UPDATE STOCK STATEMENT DATE IN PRO.ACCOUNTCAL----------------------------------------------------*/
INSERT INTO PRO.ProcessMonitor(UserID,Description,MODE,StartTime,EndTime,TimeKey,SetID)
SELECT ORIGINAL_LOGIN(),'update stock statement date in pro.accountcal','RUNNING',GETDATE(),NULL,@TIMEKEY,@SetID


      --UPDATE A SET A.StockStDt=StockStmtDt
      --FROM PRO.AccountCal A 
      --INNER  JOIN ADVFACCCDETAIL SD ON A.AccountEntityId=SD.AccountEntityId
      --where A.FacilityType='CC'
      --AND SD.EffectiveFromTimeKey < = @TimeKey   AND SD.EffectiveToTimeKey > = @TimeKey

      --UPDATE A SET A.StockStDt=StatusDate
 --           FROM PRO.AccountCal A 
      --inner join ExceptionFinalStatusType b on a.customeracid=b.acid
      --where (B.EffectiveFromTimeKey<=@TIMEKEY AND B.EffectiveToTimeKey>=@TIMEKEY)
      --and b.StatusType=(select ParameterShortNameEnum from dimparameter where DimParameterName='UploadFLagType' and
      --    ParameterShortNameEnum='Stock statement'
      --and EffectiveFromTimeKey<=@TIMEKEY AND EffectiveToTimeKey>=@TIMEKEY)
      ----AND A.FacilityType IN('CC','OD')


      --Condition Modify By Triloki Khanna on 01/08/2022 as per New Screen ---

      UPDATE A SET A.StockStDt=StockStamentDt
            FROM PRO.AccountCal A 
      inner join StockStatement b on a.RefCustomerID=b.CIF
      where (B.EffectiveFromTimeKey<=@TIMEKEY AND B.EffectiveToTimeKey>=@TIMEKEY)
      



UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IdentityKey = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND TIMEKEY=@TIMEKEY AND DESCRIPTION='update stock statement date in pro.accountcal'
 


/*------UPDATE DerecognisedInterest1 AMT IN PRO.ACCOUNTCAL---------------------*/
INSERT INTO PRO.ProcessMonitor(UserID,Description,MODE,StartTime,EndTime,TimeKey,SetID)
SELECT ORIGINAL_LOGIN(),'UPDATE DerecognisedInterest1 AMT IN PRO.ACCOUNTCAL','RUNNING',GETDATE(),NULL,@TIMEKEY,@SetID

IF OBJECT_ID('TEMPDB..#TEMPDerecognisedInterest1') IS NOT NULL
  DROP TABLE #TEMPDerecognisedInterest1

CREATE TABLE #TEMPDerecognisedInterest1
(
AccountEntityId int,
DerecognisedInterest1 DECIMAL(18,2)
)

INSERT INTO #TEMPDerecognisedInterest1(AccountEntityId,DerecognisedInterest1)
SELECT A.ACCOUNTENTITYID,SUM(ISNULL(DerecognisedInterest1,0)) DerecognisedInterest1 FROM DBO.ADVFACBILLDETAIL A
WHERE (A.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND A.EFFECTIVETOTIMEKEY>=@TIMEKEY)
AND ISNULL(DerecognisedInterest1,0)>0
GROUP BY A.ACCOUNTENTITYID

UNION ALL
SELECT A.ACCOUNTENTITYID,SUM(ISNULL(DerecognisedInterest1,0)) DerecognisedInterest1 FROM DBO.ADVFACPCDETAIL A
WHERE (A.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND A.EFFECTIVETOTIMEKEY>=@TIMEKEY)
AND ISNULL(DerecognisedInterest1,0)>0
GROUP BY A.ACCOUNTENTITYID

UNION ALL
SELECT B.ACCOUNTENTITYID,SUM(ISNULL(B.DerecognisedInterest1,0)) DerecognisedInterest1 FROM DBO.ADVFACCCDETAIL B
WHERE (B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY) AND ISNULL(DerecognisedInterest1,0)>0
GROUP BY B.ACCOUNTENTITYID
UNION ALL
SELECT C.ACCOUNTENTITYID,SUM(ISNULL(C.DerecognisedInterest1,0)) DerecognisedInterest1 FROM DBO.ADVFACDLDETAIL C
WHERE (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY) AND ISNULL(DerecognisedInterest1,0)>0
GROUP BY C.ACCOUNTENTITYID 


/*-----UPDATE DerecognisedInterest1 IN PRO.ACCOUNTCAL TABLE ----------------------------*/

UPDATE A SET A.DerecognisedInterest1=B.DerecognisedInterest1
FROM PRO.AccountCal A INNER JOIN #TEMPDerecognisedInterest1 B ON A.ACCOUNTENTITYID=B.ACCOUNTENTITYID


UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE  IdentityKey = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE DerecognisedInterest1 AMT IN PRO.ACCOUNTCAL'
   


/*------UPDATE DerecognisedInterest2 AMT IN PRO.ACCOUNTCAL---------------------*/
INSERT INTO PRO.ProcessMonitor(UserID,Description,MODE,StartTime,EndTime,TimeKey,SetID)
SELECT ORIGINAL_LOGIN(),'UPDATE DerecognisedInterest2 AMT IN PRO.ACCOUNTCAL','RUNNING',GETDATE(),NULL,@TIMEKEY,@SetID

IF OBJECT_ID('TEMPDB..#TEMPDerecognisedInterest2') IS NOT NULL
  DROP TABLE #TEMPDerecognisedInterest2

CREATE TABLE #TEMPDerecognisedInterest2
(
AccountEntityId int,
DerecognisedInterest2 DECIMAL(18,2)
)

INSERT INTO #TEMPDerecognisedInterest2(AccountEntityId,DerecognisedInterest2)
SELECT A.ACCOUNTENTITYID,SUM(ISNULL(DerecognisedInterest2,0)) DerecognisedInterest2 FROM DBO.ADVFACBILLDETAIL A
WHERE (A.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND A.EFFECTIVETOTIMEKEY>=@TIMEKEY)
AND ISNULL(DerecognisedInterest2,0)>0
GROUP BY A.ACCOUNTENTITYID

UNION ALL
SELECT A.ACCOUNTENTITYID,SUM(ISNULL(DerecognisedInterest2,0)) DerecognisedInterest2 FROM DBO.ADVFACPCDETAIL A
WHERE (A.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND A.EFFECTIVETOTIMEKEY>=@TIMEKEY)
AND ISNULL(DerecognisedInterest2,0)>0
GROUP BY A.ACCOUNTENTITYID

UNION ALL
SELECT B.ACCOUNTENTITYID,SUM(ISNULL(B.DerecognisedInterest2,0)) DerecognisedInterest2 FROM DBO.ADVFACCCDETAIL B
WHERE (B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY) AND ISNULL(DerecognisedInterest2,0)>0
GROUP BY B.ACCOUNTENTITYID
UNION ALL
SELECT C.ACCOUNTENTITYID,SUM(ISNULL(C.DerecognisedInterest2,0)) DerecognisedInterest2 FROM DBO.ADVFACDLDETAIL C
WHERE (C.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND C.EFFECTIVETOTIMEKEY>=@TIMEKEY) AND ISNULL(DerecognisedInterest2,0)>0
GROUP BY C.ACCOUNTENTITYID 


/*-----UPDATE DerecognisedInterest2 IN PRO.ACCOUNTCAL TABLE ----------------------------*/

UPDATE A SET A.DerecognisedInterest2=B.DerecognisedInterest2
FROM PRO.AccountCal A INNER JOIN #TEMPDerecognisedInterest2 B ON A.ACCOUNTENTITYID=B.ACCOUNTENTITYID


UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE  IdentityKey = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE DerecognisedInterest2 AMT IN PRO.ACCOUNTCAL'

/*-------------UPDATE GovGurAmt FROM ADVACOTHERDETAIL-------------------------------------*/

INSERT INTO PRO.ProcessMonitor(UserID,Description,MODE,StartTime,EndTime,TimeKey,SetID)
SELECT ORIGINAL_LOGIN(),'UPDATE GovGurAmt FROM ADVACOTHERDETAIL','RUNNING',GETDATE(),NULL,@TIMEKEY,@SetID


UPDATE A SET A.GovtGtyAmt=ISNULL(B.GovGurAmt,0)
FROM PRO.AccountCal A INNER  JOIN DBO.AdvAcOtherDetail  B ON A.AccountEntityID=B.AccountEntityId
AND (B.EffectiveFromTimeKey<=@TIMEKEY AND B.EffectiveToTimeKey>=@TIMEKEY)
WHERE  ISNULL(B.GovGurAmt,0)>0

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE  IdentityKey = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE GovGurAmt FROM ADVACOTHERDETAIL'



/*-------------UPDATE UnApplied Interest FROM AdvAcFinancialDetail-------------------------------------*/

INSERT INTO PRO.ProcessMonitor(UserID,Description,MODE,StartTime,EndTime,TimeKey,SetID)
SELECT ORIGINAL_LOGIN(),'UPDATE UnApplied Interest FROM AdvAcFinancialDetail','RUNNING',GETDATE(),NULL,@TIMEKEY,@SetID


update A SET DerecognisedInterest1=B.Overdueinterest
FROM PRO.AccountCal  A
inner join dbo.AdvAcOtherFinancialDetail  B on (B.EffectiveFromTimeKey<=@TIMEKEY AND B.EffectiveToTimeKey>=@TIMEKEY )
and a.AccountEntityID=B.AccountEntityId  
inner join dbo.advfacccdetail  c on (c.EffectiveFromTimeKey<=@TIMEKEY AND c.EffectiveToTimeKey>=@TIMEKEY )
and a.AccountEntityID=c.AccountEntityId  
WHERE ISNULL(B.Overdueinterest,0)>0

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE  IdentityKey = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE UnApplied Interest FROM AdvAcFinancialDetail'


/*------------------UPDATE FRAUD ACCOUNT MARKING  IN PRO.ACCOUNTCAL------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID) 
SELECT ORIGINAL_LOGIN(),'UPDATE FRAUD ACCOUNT MARKING  IN PRO.ACCOUNTCAL','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE A SET A.Asset_Norm='ALWYS_NPA'
            ,A.SplCatg4Alt_Key=870
              ,A.FinalAssetClassAlt_Key=6
              ,A.FinalNpaDt=CASE WHEN StatusDate is NULL then @PROCESSINGDATE else  StatusDate end
              ,A.NPA_Reason='NPA DUE TO FRAUD MARKING'
              ,FlgFraud='Y'
              ,FraudDate=CASE WHEN StatusDate is NULL then @PROCESSINGDATE else  StatusDate end
              ,A.DegReason='NPA DUE TO FRAUD MARKING'
FROM PRO.AccountCal A 
inner join ExceptionFinalStatusType b on a.customeracid=b.acid
where (B.EffectiveFromTimeKey<=@TIMEKEY AND B.EffectiveToTimeKey>=@TIMEKEY)
and b.StatusType=(select ParameterShortNameEnum from dimparameter where DimParameterName='UploadFLagType' and
 ParameterShortNameEnum='Fraud Committed'
and EffectiveFromTimeKey<=@TIMEKEY AND EffectiveToTimeKey>=@TIMEKEY)
--Condition Modify By Triloki Khanna on 01/08/2022 as per New Screen ---

--UPDATE A SET A.Asset_Norm='ALWYS_NPA'
--            ,A.SplCatg4Alt_Key=870
--                  ,A.FinalAssetClassAlt_Key=6
--                  ,A.FinalNpaDt=CASE	WHEN FinalNpaDt is not NULL		THEN FinalNpaDt 
--										WHEN FraudOccuranceDate is NULL then @PROCESSINGDATE 
--										else  FraudOccuranceDate end
--                  ,A.NPA_Reason='NPA DUE TO FRAUD MARKING'
--                  ,FlgFraud='Y'
--                  ,FraudDate=CASE WHEN FraudOccuranceDate is NULL then @PROCESSINGDATE else  FraudOccuranceDate end
--                  ,A.DegReason='NPA DUE TO FRAUD MARKING'
--FROM PRO.AccountCal A 
--inner join Fraud_Details b on a.RefCustomerID=b.RefCustomerID
--where (B.EffectiveFromTimeKey<=@TIMEKEY AND B.EffectiveToTimeKey>=@TIMEKEY)
--AND FraudOccuranceDate IS NOT NULL 

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' 
WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE FRAUD ACCOUNT MARKING  IN PRO.ACCOUNTCAL'


/*------------------UPDATE FRAUD ACCOUNT MARKING  IN PRO.CustomerCal------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID) 
SELECT ORIGINAL_LOGIN(),'UPDATE FRAUD ACCOUNT MARKING  IN PRO.CustomerCal','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE C SET C.Asset_Norm='ALWYS_NPA'
            ,C.SplCatg4Alt_Key=870
                ,C.SYSASSETCLASSALT_KEY=6
                ,C.SYSNPA_DT=CASE WHEN StatusDate is NULL then @PROCESSINGDATE else  StatusDate end
                ,C.DEGREASON='NPA DUE TO FRAUD MARKING'
                ,C.FraudDt=CASE WHEN StatusDate is NULL then @PROCESSINGDATE else  StatusDate end
FROM PRO.CUSTOMERCAL c
inner join ExceptionFinalStatusType b on c.RefCustomerID=b.CustomerID
inner join Pro.ACCOUNTCAL AC on  AC.CustomerAcID=B.ACID  ---Added by VIvek ----06022024--------------------
where (B.EffectiveFromTimeKey<=@TIMEKEY AND B.EffectiveToTimeKey>=@TIMEKEY)
and b.StatusType=(select ParameterShortNameEnum from dimparameter where DimParameterName='UploadFLagType' and
 ParameterShortNameEnum='Fraud Committed'
and EffectiveFromTimeKey<=@TIMEKEY AND EffectiveToTimeKey>=@TIMEKEY)

--UPDATE C SET C.Asset_Norm='ALWYS_NPA'
--            ,C.SplCatg4Alt_Key=870
--                ,C.SYSASSETCLASSALT_KEY=6
--                ,C.SYSNPA_DT=CASE WHEN StatusDate is NULL then @PROCESSINGDATE else  StatusDate end
--                ,C.DEGREASON='NPA DUE TO FRAUD MARKING'
--                ,C.FraudDt=CASE WHEN StatusDate is NULL then @PROCESSINGDATE else  StatusDate end
--FROM PRO.CUSTOMERCAL c
--inner join ExceptionFinalStatusType b on c.RefCustomerID=b.CustomerID
--where (B.EffectiveFromTimeKey<=@TIMEKEY AND B.EffectiveToTimeKey>=@TIMEKEY)
--and b.StatusType=(select ParameterShortNameEnum from dimparameter where DimParameterName='UploadFLagType' and
-- ParameterShortNameEnum='Fraud Committed'
--and EffectiveFromTimeKey<=@TIMEKEY AND EffectiveToTimeKey>=@TIMEKEY)



--UPDATE C SET C.Asset_Norm='ALWYS_NPA'
--            ,C.SplCatg4Alt_Key=870
--                  ,C.SYSASSETCLASSALT_KEY=6
--                  ,C.SYSNPA_DT=CASE WHEN C.SYSNPA_DT is not NULL THEN C.SYSNPA_DT WHEN FraudOccuranceDate is NULL then @PROCESSINGDATE else  FraudOccuranceDate end
--                  ,C.DEGREASON='NPA DUE TO FRAUD MARKING'
--                  ,C.FraudDt=CASE WHEN FraudOccuranceDate is NULL then @PROCESSINGDATE else  FraudOccuranceDate end
--FROM PRO.CUSTOMERCAL c
--inner join Fraud_Details b on c.RefCustomerID=b.RefCustomerID
--where (B.EffectiveFromTimeKey<=@TIMEKEY AND B.EffectiveToTimeKey>=@TIMEKEY)
--AND FraudOccuranceDate IS NOT NULL 

---------------------------------------------------------------------- Calypso Fradu Added By Sudesh 12132022--------------------------
/*UPDATE C SET C.Asset_Norm='ALWYS_NPA'
            --,C.SplCatg4Alt_Key=870
                  ,C.FinalAssetClassAlt_Key=6
                  ,C.NPIDt=CASE WHEN FraudOccuranceDate is NULL then @PROCESSINGDATE else  FraudOccuranceDate end
                  ,C.DEGREASON='NPA DUE TO FRAUD MARKING'
                  --,C.FraudDt=CASE WHEN FraudOccuranceDate is NULL then @PROCESSINGDATE else  FraudOccuranceDate end
FROM InvestmentFinancialDetail c
inner join Fraud_Details b on c.RefIssuerID=b.RefCustomerID
where (B.EffectiveFromTimeKey<=@TIMEKEY AND B.EffectiveToTimeKey>=@TIMEKEY)
AND FraudOccuranceDate IS NOT NULL 

UPDATE C SET C.Asset_Norm='ALWYS_NPA'
           -- ,C.SplCatg4Alt_Key=870
                  ,C.FinalAssetClassAlt_Key=6
                  ,C.NPIDt=CASE WHEN FraudOccuranceDate is NULL then @PROCESSINGDATE else  FraudOccuranceDate end
                  ,C.DEGREASON='NPA DUE TO FRAUD MARKING'
                  --,C.FraudDt=CASE WHEN FraudOccuranceDate is NULL then @PROCESSINGDATE else  FraudOccuranceDate end
FROM Curdat.DerivativeDetail c
inner join Fraud_Details b on c.CustomerID=b.RefCustomerID
where (B.EffectiveFromTimeKey<=@TIMEKEY AND B.EffectiveToTimeKey>=@TIMEKEY)
AND FraudOccuranceDate IS NOT NULL */

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' 
WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE FRAUD ACCOUNT MARKING  IN PRO.CustomerCal'



/*------------------UPDATE IBPC MARKING  IN PRO.AccountCal------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID) 
SELECT ORIGINAL_LOGIN(),'UPDATE IBPC MARKING  IN PRO.AccountCal','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID
UPDATE A SET A.IsIBPC='Y'
           FROM PRO.AccountCal A 
inner join IBPCFinalPoolDetail b on a.CustomerAcID=b.ACCOUNTID
where (B.EffectiveFromTimeKey<=@TIMEKEY AND B.EffectiveToTimeKey>=@TIMEKEY)

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' 
WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) 
AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE IBPC MARKING  IN PRO.AccountCal'

/*------------------UPDATE Securitised MARKING  IN PRO.AccountCal------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID) 
SELECT ORIGINAL_LOGIN(),'UPDATE Securitised MARKING  IN PRO.AccountCal','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID
UPDATE A SET A.IsSecuritised='Y'
          FROM PRO.AccountCal A 
inner join SecuritizedFinalACDetail b on a.CustomerAcID=b.ACCOUNTID
where (B.EffectiveFromTimeKey<=@TIMEKEY AND B.EffectiveToTimeKey>=@TIMEKEY)

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' 
WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) 
AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE Securitised MARKING  IN PRO.AccountCal'

/*------------------UPDATE PUI MARKING  IN PRO.AccountCal------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID) 
SELECT ORIGINAL_LOGIN(),'UPDATE PUI MARKING  IN PRO.AccountCal','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE A SET A.PUI='Y'
        FROM PRO.AccountCal A 
inner join AdvAcPUIDetailMain b on a.CustomerAcID=b.ACCOUNTID
where (B.EffectiveFromTimeKey<=@TIMEKEY AND B.EffectiveToTimeKey>=@TIMEKEY)


UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' 
WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) 
AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE PUI MARKING  IN PRO.AccountCal'

/*------------------UPDATE RFA MARKING  IN PRO.AccountCal------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID) 
SELECT ORIGINAL_LOGIN(),'UPDATE RFA MARKING  IN PRO.AccountCal','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID
--UPDATE A SET A.RFA='Y'
--            FROM PRO.AccountCal A 
--inner join ExceptionFinalStatusType b on a.customeracid=b.acid
--where (B.EffectiveFromTimeKey<=@TIMEKEY AND B.EffectiveToTimeKey>=@TIMEKEY)
--and b.StatusType=(select ParameterShortNameEnum from dimparameter where DimParameterName='UploadFLagType' and
-- ParameterShortNameEnum='RFA'
--and EffectiveFromTimeKey<=@TIMEKEY AND EffectiveToTimeKey>=@TIMEKEY)


----UPDATE A SET A.Asset_Norm='ALWYS_NPA'
----              ,A.FinalAssetClassAlt_Key=6
----              ,A.FinalNpaDt=CASE WHEN StatusDate is NULL then @PROCESSINGDATE else  StatusDate end
----              ,A.NPA_Reason='NPA DUE TO RFA MARKING'
----              ,RFA='Y'
----              ,A.DegReason='NPA DUE TO RFA MARKING'
----        FROM PRO.AccountCal A 
----inner join ExceptionFinalStatusType b on a.customeracid=b.acid
----where (B.EffectiveFromTimeKey<=@TIMEKEY AND B.EffectiveToTimeKey>=@TIMEKEY)
----and b.StatusType=(select ParameterShortNameEnum from dimparameter where DimParameterName='UploadFLagType' and
---- ParameterShortNameEnum='RFA'
----and EffectiveFromTimeKey<=@TIMEKEY AND EffectiveToTimeKey>=@TIMEKEY)
----AND StatusDate <@6MonthBackDate

----UPDATE C SET C.Asset_Norm='ALWYS_NPA'
----              ,C.SYSASSETCLASSALT_KEY=6
----              ,C.SYSNPA_DT=CASE WHEN StatusDate is NULL then @PROCESSINGDATE else  StatusDate end
----              ,C.DEGREASON='NPA DUE TO RFA MARKING'
----              FROM PRO.CUSTOMERCAL c
----inner join ExceptionFinalStatusType b on c.RefCustomerID=b.CustomerID
----where (B.EffectiveFromTimeKey<=@TIMEKEY AND B.EffectiveToTimeKey>=@TIMEKEY)
----and b.StatusType=(select ParameterShortNameEnum from dimparameter where DimParameterName='UploadFLagType' and
---- ParameterShortNameEnum='RFA'
----and EffectiveFromTimeKey<=@TIMEKEY AND EffectiveToTimeKey>=@TIMEKEY)
----AND StatusDate <@6MonthBackDate

--Condition Modify By Triloki Khanna on 01/08/2022 as per New Screen ---

 UPDATE A SET A.RFA='Y'
            FROM PRO.AccountCal A 
inner join Fraud_Details b on a.customeracid=b.RefCustomerACID
where (B.EffectiveFromTimeKey<=@TIMEKEY AND B.EffectiveToTimeKey>=@TIMEKEY)
AND B.RFA_DateReportingByBank IS NOT NULL
 AND B.DateofRemovalofRFAClassification IS NULL

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' 
WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) 
AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE RFA MARKING  IN PRO.AccountCal'

/*------------------UPDATE NonCooperative MARKING  IN PRO.AccountCal------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID) 
SELECT ORIGINAL_LOGIN(),'UPDATE NonCooperative MARKING  IN PRO.AccountCal','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID
UPDATE A SET A.IsNonCooperative='Y'
            FROM PRO.AccountCal A 
inner join ExceptionFinalStatusType b on a.customeracid=b.acid
where (B.EffectiveFromTimeKey<=@TIMEKEY AND B.EffectiveToTimeKey>=@TIMEKEY)
and b.StatusType=(select ParameterShortNameEnum from dimparameter where DimParameterName='UploadFLagType' and
 ParameterShortNameEnum='Non-cooperative'
and EffectiveFromTimeKey<=@TIMEKEY AND EffectiveToTimeKey>=@TIMEKEY)

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' 
WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) 
AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE NonCooperative MARKING  IN PRO.AccountCal'


/*------------------UPDATE Repossessed ACCOUNT MARKING  IN PRO.ACCOUNTCAL------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID) 
SELECT ORIGINAL_LOGIN(),'UPDATE Repossessed ACCOUNT MARKING  IN PRO.ACCOUNTCAL','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE A SET  A.RePossession='Y'
                  FROM PRO.AccountCal A 
inner join ExceptionFinalStatusType b on a.customeracid=b.acid
where (B.EffectiveFromTimeKey<=@TIMEKEY AND B.EffectiveToTimeKey>=@TIMEKEY)
and b.StatusType=(select ParameterShortNameEnum from dimparameter where DimParameterName='UploadFLagType' and
 ParameterShortNameEnum='Repossesed'
and EffectiveFromTimeKey<=@TIMEKEY AND EffectiveToTimeKey>=@TIMEKEY)

UPDATE A SET A.Asset_Norm='ALWYS_NPA'
            ,A.FinalAssetClassAlt_Key=2
                  ,A.FinalNpaDt=CASE WHEN REPOSSESSIONDATE is NULL then @PROCESSINGDATE else  REPOSSESSIONDATE end  --FinalNpaDt
                  ,A.NPA_Reason='NPA DUE TO Repossessed Account'
                  ,A.RePossession='Y'
                  ,A.DegReason='NPA DUE TO Repossessed Account'
                  FROM PRO.AccountCal A 
inner join ExceptionFinalStatusType b on a.customeracid=b.acid
where (B.EffectiveFromTimeKey<=@TIMEKEY AND B.EffectiveToTimeKey>=@TIMEKEY)
and b.StatusType=(select ParameterShortNameEnum from dimparameter where DimParameterName='UploadFLagType' and
 ParameterShortNameEnum='Repossesed'
and EffectiveFromTimeKey<=@TIMEKEY AND EffectiveToTimeKey>=@TIMEKEY) and FinalAssetClassAlt_Key=1


UPDATE A SET A.Asset_Norm='ALWYS_NPA'
            ,A.NPA_Reason='NPA DUE TO Repossessed Account'
                  ,A.RePossession='Y'
                  ,A.DegReason='NPA DUE TO Repossessed Account'
FROM PRO.AccountCal A 
inner join ExceptionFinalStatusType b on a.customeracid=b.acid
where (B.EffectiveFromTimeKey<=@TIMEKEY AND B.EffectiveToTimeKey>=@TIMEKEY)
and b.StatusType=(select ParameterShortNameEnum from dimparameter where DimParameterName='UploadFLagType' and
 ParameterShortNameEnum='Repossesed'
and EffectiveFromTimeKey<=@TIMEKEY AND EffectiveToTimeKey>=@TIMEKEY) and FinalAssetClassAlt_Key>1


update a set SysAssetClassAlt_Key=b.FinalAssetClassAlt_Key,SysNPA_Dt=b.FinalNpaDt,a.DegReason=b.NPA_Reason,a.Asset_Norm=b.Asset_Norm
FROM pro.customercal a
inner join PRO.AccountCal b
on a.CustomerEntityID=b.CustomerEntityID
where b.RePossession='Y' 


UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' 
WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE Repossessed ACCOUNT MARKING  IN PRO.ACCOUNTCAL'



/*------------------UPDATE Inherent Weakness  ACCOUNT MARKING  IN PRO.ACCOUNTCAL------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID) 
SELECT ORIGINAL_LOGIN(),'UPDATE Inherent Weakness ACCOUNT MARKING  IN PRO.ACCOUNTCAL','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE A SET A.Asset_Norm='ALWYS_NPA'
            ,A.FinalAssetClassAlt_Key=2
                  ,A.FinalNpaDt=CASE WHEN FinalNpaDt is NULL then @PROCESSINGDATE else  FinalNpaDt end
                  ,A.NPA_Reason='NPA DUE TO Inherent Weakness Account'
                  ,A.WeakAccount='Y'
                  ,A.DegReason='NPA DUE TO Inherent Weakness Account'
FROM PRO.AccountCal A 
inner join ExceptionFinalStatusType b on a.customeracid=b.acid
where (B.EffectiveFromTimeKey<=@TIMEKEY AND B.EffectiveToTimeKey>=@TIMEKEY)
and b.StatusType=(select ParameterShortNameEnum from dimparameter where DimParameterName='UploadFLagType' and
 ParameterShortNameEnum='Inherent Weakness'
and EffectiveFromTimeKey<=@TIMEKEY AND EffectiveToTimeKey>=@TIMEKEY) and FinalAssetClassAlt_Key=1


UPDATE A SET A.Asset_Norm='ALWYS_NPA'
            ,A.NPA_Reason='NPA DUE TO Inherent Weakness Account'
                  ,A.WeakAccount='Y'
FROM PRO.AccountCal A 
inner join ExceptionFinalStatusType b on a.customeracid=b.acid
where (B.EffectiveFromTimeKey<=@TIMEKEY AND B.EffectiveToTimeKey>=@TIMEKEY)
and b.StatusType=(select ParameterShortNameEnum from dimparameter where DimParameterName='UploadFLagType' and
 ParameterShortNameEnum='Inherent Weakness'
and EffectiveFromTimeKey<=@TIMEKEY AND EffectiveToTimeKey>=@TIMEKEY) and FinalAssetClassAlt_Key>1

update a set SysAssetClassAlt_Key=b.FinalAssetClassAlt_Key,SysNPA_Dt=b.FinalNpaDt,a.DegReason=b.NPA_Reason,a.Asset_Norm=b.Asset_Norm
FROM pro.customercal a
inner join PRO.AccountCal b
on a.CustomerEntityID=b.CustomerEntityID
where b.WeakAccount='Y' 


UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' 
WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE Inherent Weakness ACCOUNT MARKING  IN PRO.ACCOUNTCAL'




/*------------------UPDATE SARFAESI ACCOUNT MARKING IN PRO.ACCOUNTCAL------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID) 
SELECT ORIGINAL_LOGIN(),'UPDATE SARFAESI ACCOUNT MARKING IN PRO.ACCOUNTCAL','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID


UPDATE A SET  A.Sarfaesi='Y'
                  FROM PRO.AccountCal A 
inner join ExceptionFinalStatusType b on a.customeracid=b.acid
where (B.EffectiveFromTimeKey<=@TIMEKEY AND B.EffectiveToTimeKey>=@TIMEKEY)
and b.StatusType=(select ParameterShortNameEnum from dimparameter where DimParameterName='UploadFLagType' and
 ParameterShortNameEnum='SARFAESI'
and EffectiveFromTimeKey<=@TIMEKEY AND EffectiveToTimeKey>=@TIMEKEY)


UPDATE A SET A.Asset_Norm='ALWYS_NPA'
            ,A.FinalAssetClassAlt_Key=2
                  ,A.FinalNpaDt=CASE WHEN FinalNpaDt is NULL then @PROCESSINGDATE else  FinalNpaDt end
                  ,A.NPA_Reason='NPA DUE TO SARFAESI  Account'
                  ,A.DegReason='NPA DUE TO SARFAESI  Account'
                  FROM PRO.AccountCal A 
inner join ExceptionFinalStatusType b on a.customeracid=b.acid
where (B.EffectiveFromTimeKey<=@TIMEKEY AND B.EffectiveToTimeKey>=@TIMEKEY)
and b.StatusType=(select ParameterShortNameEnum from dimparameter where DimParameterName='UploadFLagType' and
 ParameterShortNameEnum='SARFAESI'
and EffectiveFromTimeKey<=@TIMEKEY AND EffectiveToTimeKey>=@TIMEKEY)AND FinalAssetClassAlt_Key=1



UPDATE A SET A.Asset_Norm='ALWYS_NPA'
            ,A.NPA_Reason='NPA DUE TO Sarfaesi Account'
                  ,A.Sarfaesi='Y'
                  ,A.DegReason='NPA DUE TO SARFAESI  Account'
      FROM PRO.AccountCal A 
inner join ExceptionFinalStatusType b on a.customeracid=b.acid
where (B.EffectiveFromTimeKey<=@TIMEKEY AND B.EffectiveToTimeKey>=@TIMEKEY)
and b.StatusType=(select ParameterShortNameEnum from dimparameter where DimParameterName='UploadFLagType' and
 ParameterShortNameEnum='SARFAESI'
and EffectiveFromTimeKey<=@TIMEKEY AND EffectiveToTimeKey>=@TIMEKEY)and FinalAssetClassAlt_Key>1



update a set SysAssetClassAlt_Key=b.FinalAssetClassAlt_Key,SysNPA_Dt=b.FinalNpaDt,a.DegReason=b.NPA_Reason,a.Asset_Norm=b.Asset_Norm
FROM pro.customercal a
inner join PRO.AccountCal b
on a.CustomerEntityID=b.CustomerEntityID
where b.Sarfaesi='Y' 


UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' 
WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE SARFAESI ACCOUNT MARKING IN PRO.ACCOUNTCAL'


/*------------------UPDATE RC-Pending MARKING  IN PRO.AccountCal------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID) 
SELECT ORIGINAL_LOGIN(),'UPDATE RC-Pending MARKING  IN PRO.AccountCal','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID
UPDATE A SET A.RCPending='Y'
            FROM PRO.AccountCal A 
inner join ExceptionFinalStatusType b on a.customeracid=b.acid
where (B.EffectiveFromTimeKey<=@TIMEKEY AND B.EffectiveToTimeKey>=@TIMEKEY)
and b.StatusType=(select ParameterShortNameEnum from dimparameter where DimParameterName='UploadFLagType' and
 ParameterShortNameEnum='RC Pending'
and EffectiveFromTimeKey<=@TIMEKEY AND EffectiveToTimeKey>=@TIMEKEY)

UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' 
WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) 
AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE RC-Pending MARKING  IN PRO.AccountCal'

/*------------------UPDATE Written-Off Accounts ACCOUNT MARKING  IN PRO.ACCOUNTCAL------------------*/
INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID) 
SELECT ORIGINAL_LOGIN(),'UPDATE Written-Off Accounts MARKING IN PRO.ACCOUNTCAL','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE A SET A.Asset_Norm='ALWYS_NPA'
            ,A.SplCatg4Alt_Key=860
                  ,A.FinalAssetClassAlt_Key=2
                  ,A.FinalNpaDt=CASE WHEN FinalNpaDt is NULL then @PROCESSINGDATE else  FinalNpaDt end
                  ,A.NPA_Reason='NPA DUE TO Written-Off Account'
                  ,A.DegReason='NPA DUE TO Written-Off Account'
                  FROM PRO.AccountCal A INNER JOIN AdvAcOtherDetail B 
ON A.AccountEntityID=B.AccountEntityID AND (B.EffectiveFromTimeKey<=@TIMEKEY AND B.EffectiveToTimeKey>=@TIMEKEY)
where 860 IN (ISNULL(B.SplCatg1Alt_Key,0),ISNULL(B.SplCatg2Alt_Key,0),ISNULL(B.SplCatg3Alt_Key,0),ISNULL(B.SplCatg4Alt_Key,0))
and FinalAssetClassAlt_Key=1


Update B Set B.Asset_Norm='ALWYS_NPA'
FROM PRO.AccountCal A INNER JOIN Pro.CUSTOMERCAL B 
ON A.UcifEntityID=B.UcifEntityID
Where A.Asset_Norm='ALWYS_NPA' And B.UcifEntityID>0


UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' 
WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE Written-Off Accounts MARKING IN PRO.ACCOUNTCAL'




INSERT INTO PRO.PROCESSMONITOR(USERID,DESCRIPTION,MODE,STARTTIME,ENDTIME,TIMEKEY,SETID) 
SELECT ORIGINAL_LOGIN(),'UPDATE CONDI_STD TO ALWYS_STD IN PRO.AccountCal','RUNNING',GETDATE(),NULL,@TIMEKEY,@SETID

UPDATE A SET A.Asset_Norm='ALWYS_STD' 
   FROM PRO.AccountCal A
             INNER JOIN (
                SELECT C.AccountEntityID,SUM(isnull(CurrentValue,0)) CurrentValue
            FROM dbo.AdvSecurityVAlueDetail B
                  INNER  JOIN dbo.AdvSecurityDetail Advsec on Advsec.SecurityEntityID=b.SecurityEntityID
                   INNER JOIN PRO.AccountCal C ON Advsec.AccountEntityID=C.AccountEntityID  
                    AND Advsec.SecurityAlt_Key = Advsec.SecurityAlt_Key
                                           AND  Advsec.EffectiveFromTimeKey < = @TimeKey
                                        AND Advsec.EffectiveToTimeKey   >= @TimeKey
                  INNER JOIN DimCollateralSubType D ON D.EffectiveFromTimeKey<=@TIMEKEY
                                                                              AND D.EffectiveToTimeKey>=@TIMEKEY
                                                                              AND D.CollateralSubTypeAltKey=Advsec.SecurityAlt_Key 
                  WHERE   Advsec.SecurityType='P'     
                  AND D.SrcSecurityCode IN ('CASHM01','DEPOS01','GOLJW01')                                            
                  GROUP BY C.AccountEntityID
                   ) E  ON A.AccountEntityID=E.AccountEntityID
                   AND ISNULL(A.Balance,0)>0  AND  ISNULL(A.SecurityValue,0)>=ISNULL(A.Balance,0)
                   
                                       

                   
UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' 
WHERE IDENTITYKEY = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND  TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE CONDI_STD TO ALWYS_STD IN PRO.AccountCal'


 
--   /*------------********UPDATE Last Credit Date******--------------------*/ 
INSERT INTO PRO.ProcessMonitor(UserID,Description,MODE,StartTime,EndTime,TimeKey,SetID)
SELECT ORIGINAL_LOGIN(),'UPDATE Last Credit Date','RUNNING',GETDATE(),NULL,@TIMEKEY,@SetID
  

      EXEC PRO.LastCreditDtAccountCalUpdate
            
      UPDATE A SET   
      A.LastCrDate=B.LastCrDate,A.CreditsinceDt=B.LastCrDate
      FROM PRO.ACCOUNTCAL A INNER MERGE JOIN  [PRO].[LastCreditDtAccountCal]  B 
      ON   (B.EFFECTIVEFROMTIMEKEY<= @TIMEKEY AND B.EFFECTIVETOTIMEKEY>=@TIMEKEY)
      AND  A.CustomerAcID=B.CustomerAcID
      and FacilityType  in('CC','OD','CCOD')
      

        OPTION (MAXDOP 1)
UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IdentityKey = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE Last Credit Date'




/*---------UPDATE AddlProvisionAmount  AT Account level--------------------- */    
 
 INSERT INTO PRO.ProcessMonitor(UserID,Description,MODE,StartTime,EndTime,TimeKey,SetID)
 SELECT ORIGINAL_LOGIN(),'UPDATE AddlProvisionAmount  AT Account level','RUNNING',GETDATE(),NULL,@TIMEKEY,@SetID

--IF OBJECT_ID('TEMPDB..#AddlProvisionAmount') IS NOT NULL
--DROP TABLE #AddlProvisionAmount

--select AccountEntityID,CustomerAcID,AddlProvisionPer, AddlProvision,MOCTYPE
--into #AddlProvisionAmount
--from pro.accountcal_hist   A
--where A.EffectiveFromTimeKey<=@LastQtrDateKey and A.EffectiveToTimeKey>=@LastQtrDateKey 
--and AddlProvision>0 
----and MOCTYPE='Manual'

 
--UPDATE B SET ADDLPROVISIONPER=A.ADDLPROVISIONPER,ADDLPROVISION=A.ADDLPROVISION,MOCTYPE=A.MOCTYPE
--FROM #ADDLPROVISIONAMOUNT A
--INNER JOIN PRO.ACCOUNTCAL B
--ON A.CUSTOMERACID=B.CUSTOMERACID


UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' WHERE IdentityKey = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) AND TIMEKEY=@TIMEKEY AND DESCRIPTION='UPDATE AddlProvisionAmount  AT Account level'
    
      
      
IF OBJECT_ID('TEMPDB..#TEMPTABLEREFCUSTOMERIDUniform') IS NOT NULL
    DROP TABLE #TEMPTABLEREFCUSTOMERIDUniform
      
      SELECT REFCUSTOMERID,MAX(ISNULL(SYSASSETCLASSALT_KEY,1)) SYSASSETCLASSALT_KEY
      ,MIN(SYSNPA_DT) SYSNPA_DT 
       INTO #TEMPTABLEREFCUSTOMERIDUniform FROM PRO.CUSTOMERCAL A
       
      WHERE (A.REFCUSTOMERID IS NOT NULL AND REFCUSTOMERID<>'0')  AND  ISNULL(A.SYSASSETCLASSALT_KEY,1)<>1
      GROUP BY  A.REFCUSTOMERID

      UPDATE A SET A.SYSASSETCLASSALT_KEY=B.SYSASSETCLASSALT_KEY
                   ,A.SYSNPA_DT=B.SYSNPA_DT  
       FROM PRO.CUSTOMERCAL A INNER JOIN #TEMPTABLEREFCUSTOMERIDUniform B ON A.REFCUSTOMERID=B.REFCUSTOMERID

       UPDATE A SET DEGREASON='PERCOLATION BY CUSTOMERID ' + ' ' + B.REFCUSTOMERID 
        FROM PRO.CUSTOMERCAL A INNER JOIN #TEMPTABLEREFCUSTOMERIDUniform B ON A.REFCUSTOMERID=B.REFCUSTOMERID
       WHERE A.SYSASSETCLASSALT_KEY=1
       AND A.DEGREASON IS NULL

       

       UPDATE A SET DegReason='PERCOLATION BY  CUSTOMERID ' + ' ' + B.REFCUSTOMERID
                        ,NPA_Reason='PERCOLATION BY  CUSTOMERID ' + ' '  + B.REFCUSTOMERID
                        ,A.FinalNpaDt=B.SYSNPA_DT 
                        ,FinalAssetClassAlt_Key=b.SYSASSETCLASSALT_KEY
       FROM PRO.accountcal A INNER JOIN #TEMPTABLEREFCUSTOMERIDUniform B ON A.REFCUSTOMERID=B.REFCUSTOMERID
       WHERE  A.FinalAssetClassAlt_Key=1
       





      UPDATE A SET InitialNpaDt =null 
       FROM PRO.ACCOUNTCAL A where InitialAssetClassAlt_Key =1
      UPDATE A SET FinalNpaDt =null 
       FROM PRO.ACCOUNTCAL A where FinalAssetClassAlt_Key =1

       
      UPDATE A SET SrcNPA_Dt =null 
       FROM PRO.CUSTOMERCAL A where SrcAssetClassAlt_Key =1
      UPDATE A SET SysNPA_Dt =null 
       FROM PRO.CUSTOMERCAL A where SysAssetClassAlt_Key =1

       

       
----/*  UPDATE MOC STATUS  */
----  DECLARE @PrevMonthTimeKey INT=(SELECT LastMonthDateKey FROM SysDayMatrix WHERE TimeKey =@TIMEKEY)

  /*RESTRUCTURE UPDATES */

--TRUNCATE TABLE [PRO].[AdvAcRestructureCal] 

--------------------------Insert Data for Base Columns 
--INSERT INTO [PRO].[AdvAcRestructureCal]
--      (
--                  AccountEntityId
--                  ,AssetClassAlt_KeyOnInvocation
--                  ,PreRestructureAssetClassAlt_Key
--                  ,PreRestructureNPA_Date
--                  ,ProvPerOnRestrucure
--                  ,RestructureTypeAlt_Key
--                  ,COVID_OTR_CatgAlt_Key
--                  ,RestructureDt
--                  ,SP_ExpiryDate
--                  ,RestructurePOS
--                  ,DPD_AsOnRestructure
--                  ,RestructureFailureDate
--                  ,DPD_Breach_Date
--                  ,ZeroDPD_Date
--                  ,SP_ExpiryExtendedDate
--                  ,Res_POS_to_CurrentPOS_Per
--                  ,CurrentDPD
--                  ,TotalDPD
--                  ,VDPD
--                  ,AddlProvPer
--                  ,ProvReleasePer
--                  ,UpgradeDate
--                  ,SurvPeriodEndDate
--                  ,PreDegProvPer
--                  ,NonFinDPD
--                  ,InitialAssetClassAlt_Key
--                  ,FinalAssetClassAlt_Key
--                  ,RestructureProvision
--                  ,SecuredProvision
--                  ,UnSecuredProvision
--                  ,FlgDeg
--                  ,FlgUpg
--                  ,DegDate
--                  ,RestructureStage
--                  ,EffectiveFromTimeKey
--                  ,EffectiveToTimeKey
--                  ,InvestmentGrade
--                  ,POS_10PerPaidDate
--                  ,FlgMorat
--                  ,PreRestructureNPA_Prov
--                  ,RestructureFacilityTypeAlt_Key
--      )
--SELECT 
--                  A.AccountEntityId
--                  ,AssetClassAlt_KeyOnInvocation
--                  ,PreRestructureAssetClassAlt_Key
--                  ,PreRestructureNPA_Date
--                  ,ProvPerOnRestrucure
--                  ,RestructureTypeAlt_Key
--                  ,COVID_OTR_CatgAlt_Key
--                  ,RestructureDt
--                  ,DATEADD(YY,1,(CASE WHEN ISNULL(PrincRepayStartDate,'1900-01-01')>=ISNULL(InttRepayStartDate,'1900-01-01') 
--                                                      THEN PrincRepayStartDate ELSE  InttRepayStartDate END)
--                                      ) SP_ExpiryDate
--                  ,CASE When ISNULL(RestructurePOS,0)<=0 THEN 0 ELSE ISNULL(RestructurePOS,0) END RestructurePOS
--                  ,DPD_AsOnRestructure
--                  ,NULL RestructureFailureDate
--                  ,DPD_Breach_Date
--                  ,ZeroDPD_Date
--                  ,NULL SP_ExpiryExtendedDate
--                  ,0 Res_POS_to_CurrentPOS_Per
--                  ,0 CurrentDPD
--                  ,0 TotalDPD
--                  ,0 VDPD
--                  ,0 AddlProvPer
--                  ,0 ProvReleasePer
--                  ,UpgradeDate
--                  ,SurvPeriodEndDate
--                  ,PreDegProvPer
--                  ,0 NonFinDPD
--                  ,1 InitialAssetClassAlt_Key
--                  ,1 FinalAssetClassAlt_Key
--                  ,0 RestructureProvision
--                  ,0 SecuredProvision
--                  ,0 UnSecuredProvision
--                  ,'N' FlgDeg
--                  ,'N' FlgUpg
--                  ,NULL DegDate
--                  ,RestructureStage
--                  ,@Timekey EffectiveFromTimeKey
--                  ,@Timekey EffectiveToTimeKey
--                  ,InvestmentGrade
--                  ,POS_10PerPaidDate
--                  ,FlgMorat
--                  ,PreRestructureNPA_Prov
--                  ,RestructureFacilityTypeAlt_Key
--      FROM AdvAcRestructureDetail A
--            INNER JOIN PRO.ACCOUNTCAL B
--                  ON A.AccountEntityId =B.AccountEntityID
--      WHERE A.EffectiveFromTimeKey<=@TimeKey and A.EffectiveToTimeKey>=@Timekey
      
----------------Update Total OS, Total POS,CrntQtrAssetClass----------------

--Select * 
Update A SET 
             A.CurrentPOS=CASE When ISNULL(PrincOutStd,0)<=0 THEN 0 ELSE ISNULL(PrincOutStd,0) END
            ,A.CurrentTOS=Balance
            --,A.FinalAssetClassAlt_Key=b.FinalAssetClassAlt_Key
            --,A.InitialAssetClassAlt_Key=B.InitialAssetClassAlt_Key
            ,A.AppliedNormalProvPer=CASE WHEN B.FinalAssetClassAlt_Key =1 THEN SP.ProvisionSecured
                                                                        ELSE B.FinalProvisionPer END
            --,A.FinalNpaDt=b.FinalNpaDt
            --,A.UpgradeDate=b.UpgDate
            ,A.SurvPeriodEndDate=case when A.UpgradeDate is not null then DATEADD(yy,1,A.UpgradeDate) else null end
            ,CurrentDPD=B.DPD_Max
            FROM [PRO].[AdvAcRestructureCal] A

            INNER JOIN PRO.ACCOUNTCAL B ON A.AccountEntityId=B.AccountEntityID--A.CustomerAcid=B.CustomerAcid commented by zain on 20250407 as customeracid column was not in current [PRO].[AdvAcRestructureCal] 
            LEFT JOIN DimProvision_SegStd SP
                  ON SP.EffectiveFromTimeKey<=@TimeKey AND SP.EffectiveToTimeKey>=@TimeKey
                  AND SP.ProvisionAlt_Key=B.ProvisionAlt_Key
            LEFT JOIN DimProvision_Seg NP
                  ON NP.EffectiveFromTimeKey<=@TimeKey AND NP.EffectiveToTimeKey>=@TimeKey
                  AND NP.ProvisionAlt_Key=B.ProvisionAlt_Key
                  
      WHERE A.EffectiveFromTimeKey<=@TimeKey And A.EffectiveToTimeKey>=@TimeKey

            ------UPDATE A SET
            ------A.Res_POS_to_CurrentPOS_Per=-----CAST( (CAST((cast((ISNULL(a.RestructurePOS,0.00)-ISNULL(B.PrincOutStd,0.00)) as decimal(22,2))      /ISNULL(A.RestructurePOS,1)) AS DECIMAL(20,2)))*100 AS DECIMAL(5,2))
            ------                                                CASE 
            ------                                                      WHEN (ISNULL(RestructurePOS,0))>0 then
            ------                                                            CASE WHEN ((ISNULL(RestructurePOS,0)-ISNULL(A.CurrentPos,0.00))*100)/(ISNULL(RestructurePOS,0))>100
            ------                                                                              OR ((ISNULL(RestructurePOS,0)-ISNULL(A.CurrentPos,0.00))*100)/(ISNULL(RestructurePOS,0))<0
            ------                                                            THEN 0
            ------                                                                  ELSE
            ------                                                                        CAST(ROUND( ((ISNULL(RestructurePOS,0)-ISNULL(A.CurrentPos,0.00))*100)/(ISNULL(RestructurePOS,0))  ,2) AS DECIMAL(5,2))
            ------                                                            END
                                                                  
            ------                                                else 0 end

            ------FROM [PRO].[AdvAcRestructureCal] A


      update A
             set SP_ExpiryDate =dateadd(yy,1,RestructureDt)
      FROM [PRO].[AdvAcRestructureCal] A
      where SP_ExpiryDate is NULL


      ------UPDATE a
      ------      set Res_POS_to_CurrentPOS_Per   = CASE WHEN ISNULL(Res_POS_to_CurrentPOS_Per,0)<0 THEN 0 ELSE         Res_POS_to_CurrentPOS_Per END
                  
      ------      FROM [PRO].[AdvAcRestructureCal] A

      ------UPDATE a
      ------      set POS_10PerPaidDate =@ProcessingDate 
      ------      FROM [PRO].[AdvAcRestructureCal] A
      ------      wHERE POS_10PerPaidDate IS NULL
      ------      AND iSNULL(Res_POS_to_CurrentPOS_Per,0)>=10

      ------UPDATE a
      ------      SET SP_ExpiryDate =CASE WHEN A.POS_10PerPaidDate>b.SP_ExpiryDate THEN A.POS_10PerPaidDate ELSE b.SP_ExpiryDate END
      ------FROM [PRO].[AdvAcRestructureCal] A
      ------      inner join ADVACRESTRUCTUREDETAIL b
      ------            ON a.AccountEntityId =b.AccountEntityId 
      ------            AND (b.EffectiveFromTimeKey<=@TIMEKEY and b.EffectiveToTimeKey >=@TIMEKEY)
      ------      INNER JOIN DimParameter D 
      ------                  ON D.EffectiveFromTimeKey <=@timekey AND D.EffectiveToTimeKey>=@timekey 
      ------                  AND D.ParameterAlt_Key=B.RestructureTypeAlt_Key
      ------                  AND D.DimParameterName='TypeofRestructuring' 
      ------            AND  D.ParameterShortNameEnum='PRUDENTIAL'
      ------      WHERE A.POS_10PerPaidDate IS NOT NULL

            UPDATE A
            SET SP_ExpiryExtendedDate=DATEADD(YY,1, ZeroDPD_Date )
            FROM [PRO].[AdvAcRestructureCal] A
                  WHERE ZeroDPD_Date IS NOT NULL
                        AND SP_ExpiryExtendedDate IS NULL

            UPDATE A
                  SET SP_ExpiryExtendedDate=NULL
            FROM [PRO].[AdvAcRestructureCal] A
                  WHERE SP_ExpiryDate >SP_ExpiryExtendedDate


      ------UPDATE A SET ASSET_NORM='ALWYS_NPA'
      ------ FROM PRO.ACCOUNTCAL A 
      ------      INNER JOIN [PRO].[AdvAcRestructureCal] B 
      ------            ON A.AccountEntityID=B.AccountEntityID
      ------      INNER JOIN DimParameter D 
      ------                  ON D.EffectiveFromTimeKey <=@timekey AND D.EffectiveToTimeKey>=@timekey 
      ------                  AND D.ParameterAlt_Key=B.RestructureTypeAlt_Key
      ------                  AND D.DimParameterName='TypeofRestructuring' 
      ------      WHERE D.ParameterShortNameEnum='PRUDENTIAL'
      ------                  --AND B.DPD_Breach_Date IS NOT NULL



            /* END OF RESTRUCTURE WORK*/

/* START OF PUI WORK*/

TRUNCATE TABLE PRO.PUI_CAL
INSERT INTO  PRO.PUI_CAL
            (
                  CustomerEntityID
                  ,AccountEntityId
                  ,ProjectCategoryAlt_Key
                  ,ProjectSubCategoryAlt_key
                  ,DelayReasonChangeinOwnership
                  ,ProjectAuthorityAlt_key
                  ,OriginalDCCO
                  ,OriginalProjectCost
                  ,OriginalDebt
                  ,Debt_EquityRatio
                  ,ChangeinProjectScope
                  ,FreshOriginalDCCO
                  ,RevisedDCCO
                  ,CourtCaseArbitration
                  ,CIOReferenceDate
                  ,CIODCCO
                  ,TakeOutFinance
                  ,AssetClassSellerBookAlt_key
                  ,NPADateSellerBook
                  ,Restructuring
                  ,InitialExtension
                  ,BeyonControlofPromoters
                  ,DelayReasonOther
                  ,FLG_UPG
                  ,FLG_DEG
                  ,DEFAULT_REASON
                  ,ProjCategory
                  ,NPA_DATE
                  ,PUI_ProvPer
                  ,RestructureDate
                  ,ActualDCCO
                  ,ActualDCCO_Date
                  ,UpgradeDate
                  ,FinalAssetClassAlt_Key
                  ,DPD_Max
                  ,EffectiveFromTimeKey
                  ,EffectiveToTimeKey
                  ,CostOverRunPer
                  ,ProjectOwnerShipAlt_Key
            )
            
SELECT   A.CustomerEntityID,B.AccountEntityId,B.ProjectCategoryAlt_Key,B.ProjectSubCategoryAlt_key,c.ChangeinOwnerShip
            ,B.ProjectAuthorityAlt_key,B.OriginalDCCO,B.OriginalProjectCost,B.OriginalDebt,B.Debt_EquityRatio
            ,C.ChangeinProjectScope,C.FreshOriginalDCCO,C.RevisedDCCO,C.CourtCaseArbitration,C.CIOReferenceDate,C.CIODCCO
            --,C.CostOverRun,C.RevisedProjectCost,C.RevisedDebt,C.RevisedDebt_EquityRatio,C.AuthorisationStatus
            ,C.TakeOutFinance,C.AssetClassSellerBookAlt_key,C.NPADateSellerBook,C.Restructuring
            --,((C.RevisedProjectCost-B.OriginalProjectCost)*100)/B.OriginalProjectCost OverRunPer 
            ,InitialExtenstion -- InitialExtension
            ,ExtnReason_BCP-- BeyonControlofPromoters
            ---,'Y' ChangeInManagement
            ,null DelayReasonOther
            ,'N' FLG_UPG
            ,'N' FLG_DEG
            ,CAST('' AS VARCHAR(50)) DEFAULT_REASON
            ,d.ParameterShortNameEnum ProjCategory
            ,CAST(NULL AS DATE) NPA_DATE 
            ,0.00 AS PUI_ProvPer
            ,cast(NULL AS DATE) RestructureDate
            ,ActualDCCO_Achieved -- ActualDCCO
            ,ActualDCCO_Date
            ,cast(NULL AS DATE) UpgradeDate
            ,A.FinalAssetClassAlt_Key
            ,A.DPD_Max
            ,@TimeKey EffectiveFromTimeKey
            ,@TimeKey EffectiveToTimeKey
            ,CAST( (CAST((cast((ISNULL(c.RevisedProjectCost,0.00)-ISNULL(B.OriginalProjectCost,0.00)) as decimal(22,2))  /ISNULL(B.OriginalProjectCost,1)) AS DECIMAL(20,2)))*100 AS DECIMAL(5,2))
                        CostOverRunPer
            ,ProjectOwnerShipAlt_Key
FROM PRO.ACCOUNTCAL A
      INNER JOIN [dbo].[AdvAcPUIDetailMain] B
            ON A.AccountEntityID=B.AccountEntityId
            and (b.EffectiveFromTimeKey<=@TimeKey and b.EffectiveToTimeKey>=@TimeKey)     
      INNER JOIN [dbo].[AdvAcPUIDetailSub] c
            ON A.customeracid=c.accountid
            and (c.EffectiveFromTimeKey<=@TimeKey and c.EffectiveToTimeKey>=@TimeKey)     
      INNER JOIN DimParameter d
                  ON ParameterAlt_Key=b.ProjectCategoryAlt_Key
                  and (d.EffectiveFromTimeKey<=@TimeKey and d.EffectiveToTimeKey>=@TimeKey)     
                  AND DimParameterName = 'ProjectCategory'

      update pro.PUI_CAL  set CostOverRunPer =0 where CostOverRunPer<0


      UPDATE PRO.PUI_CAL SET FinnalDCCO_Date =CASE WHEN ISNULL(OriginalDCCO ,'1900-01-01')>ISNULL(CIODCCO ,'1900-01-01')
                                                                                    AND ISNULL(OriginalDCCO ,'1900-01-01')>ISNULL(FreshOriginalDCCO ,'1900-01-01')
                                                                              THEN OriginalDCCO
                                                                        WHEN ISNULL(CIODCCO,'1900-01-01')>ISNULL(OriginalDCCO  ,'1900-01-01')
                                                                                    AND ISNULL(CIODCCO ,'1900-01-01')>ISNULL(FreshOriginalDCCO ,'1900-01-01')
                                                                              THEN CIODCCO
                                                                        WHEN ISNULL(FreshOriginalDCCO,'1900-01-01')>ISNULL(CIODCCO  ,'1900-01-01')
                                                                                    AND ISNULL(FreshOriginalDCCO ,'1900-01-01')>ISNULL(OriginalDCCO ,'1900-01-01')
                                                                              THEN FreshOriginalDCCO
                                                                        ELSE '1900-01-01'
                                                                  END

            

/* END OF PUI WORK*/



/*  UPDATE MOC AND ADHOC CHANGES */
 INSERT INTO PRO.ProcessMonitor(UserID,Description,MODE,StartTime,EndTime,TimeKey,SetID)
 SELECT ORIGINAL_LOGIN(),'MOC UPDATES AUTO AND MANUAL','RUNNING',GETDATE(),NULL,@TIMEKEY,@SetID


/* ADHOC CHANGE WORK */
      
                  UPDATE A SET A.SYSASSETCLASSALT_KEY=DA.ASSETCLASSALT_KEY,A.SYSNPA_DT=B.NPA_Date,A.ASSET_NORM='ALWYS_NPA',A.MOCREASON=B.Reason,DEGREASON='NPA DUE TO Adhoc',A.MOC_DT=B.DATECREATED
                           FROM PRO.CUSTOMERCAL A
                   INNER JOIN AdhocACL_ChangeDetails B ON A.CustomerEntityId=B.CustomerEntityId
                         INNER JOIN DIMASSETCLASS DA       ON  DA.AssetClassAlt_Key= B.AssetClassAlt_Key AND
                                                         DA.ASSETCLASSSHORTNAME<>'STD' AND  
                                                         DA.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND    DA.EFFECTIVETOTIMEKEY>=@TIMEKEY
                  WHERE  B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND  B.EFFECTIVETOTIMEKEY>=@TIMEKEY


                  UPDATE A SET A.SYSASSETCLASSALT_KEY=DA.ASSETCLASSALT_KEY,A.SYSNPA_DT=B.NPA_Date,A.ASSET_NORM='ALWYS_NPA',A.MOCREASON=B.Reason,DEGREASON='NPA DUE TO Adhoc',A.MOC_DT=B.DATECREATED
                           FROM PRO.CUSTOMERCAL A
                   INNER JOIN AdhocACL_ChangeDetails B ON A.UcifEntityID=B.UcifEntityID
                                          and isnull(A.UcifEntityID,0)<>0
                         INNER JOIN DIMASSETCLASS DA       ON  DA.AssetClassAlt_Key= B.AssetClassAlt_Key AND
                                                         DA.ASSETCLASSSHORTNAME<>'STD' AND  
                                                         DA.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND    DA.EFFECTIVETOTIMEKEY>=@TIMEKEY
                  WHERE  B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND  B.EFFECTIVETOTIMEKEY>=@TIMEKEY


                  UPDATE A SET A.SYSASSETCLASSALT_KEY=DA.ASSETCLASSALT_KEY,A.SYSNPA_DT=NULL,A.DBTDT =NULL,A.ASSET_NORM='ALWYS_STD',A.MOCREASON=B.REASON,DEGREASON='STD DUE TO Adhoc',A.MOC_DT=B.DATECREATED
                   FROM PRO.CUSTOMERCAL A
                  INNER JOIN AdhocACL_ChangeDetails B ON A.CustomerEntityId=B.CustomerEntityId
                    INNER JOIN DIMASSETCLASS DA       ON  DA.AssetClassAlt_Key= B.AssetClassAlt_Key AND
                                                         DA.ASSETCLASSSHORTNAME='STD' AND      DA.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND
                                             DA.EFFECTIVETOTIMEKEY>=@TIMEKEY
                  WHERE B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND  B.EFFECTIVETOTIMEKEY>=@TIMEKEY


                  UPDATE A SET A.SYSASSETCLASSALT_KEY=DA.ASSETCLASSALT_KEY,A.SYSNPA_DT=NULL,A.DBTDT =NULL,A.ASSET_NORM='ALWYS_STD',A.MOCREASON=B.REASON,DEGREASON='STD DUE TO Adhoc',A.MOC_DT=B.DATECREATED
                   FROM PRO.CUSTOMERCAL A
                  INNER JOIN AdhocACL_ChangeDetails B ON A.UcifEntityID=B.UcifEntityID
                                                      and isnull(A.UcifEntityID,0)<>0
                    INNER JOIN DIMASSETCLASS DA       ON  DA.AssetClassAlt_Key= B.AssetClassAlt_Key AND
                                                         DA.ASSETCLASSSHORTNAME='STD' AND      DA.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND
                                             DA.EFFECTIVETOTIMEKEY>=@TIMEKEY
                  WHERE B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND  B.EFFECTIVETOTIMEKEY>=@TIMEKEY



                  UPDATE A SET A.FinalAssetClassAlt_Key=DA.ASSETCLASSALT_KEY,A.FinalNpaDt=B.NPA_Date,A.ASSET_NORM='ALWYS_NPA',A.MOCREASON=B.REASON,DEGREASON='NPA DUE TO Adhoc',A.MOC_DT=B.DATECREATED
                           FROM PRO.ACCOUNTCAL A
                   INNER JOIN AdhocACL_ChangeDetails B ON A.CustomerEntityId=B.CustomerEntityId
                         INNER JOIN DIMASSETCLASS DA       ON  DA.AssetClassAlt_Key= B.AssetClassAlt_Key AND
                                                         DA.ASSETCLASSSHORTNAME<>'STD' AND  
                                                         DA.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND
                                             DA.EFFECTIVETOTIMEKEY>=@TIMEKEY
                  WHERE B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND  B.EFFECTIVETOTIMEKEY>=@TIMEKEY


                  UPDATE A SET A.FinalAssetClassAlt_Key=DA.ASSETCLASSALT_KEY,A.FinalNpaDt=B.NPA_Date,A.ASSET_NORM='ALWYS_NPA',A.MOCREASON=B.REASON,DEGREASON='NPA DUE TO Adhoc',A.MOC_DT=B.DATECREATED
                           FROM PRO.ACCOUNTCAL A
                   INNER JOIN AdhocACL_ChangeDetails B ON A.UcifEntityID=B.UcifEntityID
                                          and isnull(A.UcifEntityID,0)<>0
                         INNER JOIN DIMASSETCLASS DA       ON  DA.AssetClassAlt_Key= B.AssetClassAlt_Key AND
                                                         DA.ASSETCLASSSHORTNAME<>'STD' AND  
                                                         DA.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND
                                             DA.EFFECTIVETOTIMEKEY>=@TIMEKEY
                  WHERE B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND  B.EFFECTIVETOTIMEKEY>=@TIMEKEY


                  UPDATE A SET A.FinalAssetClassAlt_Key=DA.ASSETCLASSALT_KEY,A.FinalNpaDt=NULL,A.ASSET_NORM='ALWYS_STD',A.MOCREASON=B.REASON,DEGREASON='STD DUE TO Adhoc',A.MOC_DT=B.DATECREATED
                   FROM PRO.ACCOUNTCAL A
                  INNER JOIN AdhocACL_ChangeDetails B ON A.CustomerEntityId=B.CustomerEntityId
                    INNER JOIN DIMASSETCLASS DA       ON  DA.AssetClassAlt_Key= B.AssetClassAlt_Key AND
                                                         DA.ASSETCLASSSHORTNAME='STD' AND  
                                                         DA.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND
                                             DA.EFFECTIVETOTIMEKEY>=@TIMEKEY
                  WHERE B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND  B.EFFECTIVETOTIMEKEY>=@TIMEKEY

                  UPDATE A SET A.FinalAssetClassAlt_Key=DA.ASSETCLASSALT_KEY,A.FinalNpaDt=NULL,A.ASSET_NORM='ALWYS_STD',A.MOCREASON=B.REASON,DEGREASON='STD DUE TO Adhoc',A.MOC_DT=B.DATECREATED
                   FROM PRO.ACCOUNTCAL A
                  INNER JOIN AdhocACL_ChangeDetails B ON A.UcifEntityID=B.UcifEntityID
                              and isnull(A.UcifEntityID,0)<>0
                   INNER JOIN DIMASSETCLASS DA       ON  DA.AssetClassAlt_Key= B.AssetClassAlt_Key AND
                                                         DA.ASSETCLASSSHORTNAME='STD' AND  
                                                         DA.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND
                                             DA.EFFECTIVETOTIMEKEY>=@TIMEKEY
                  WHERE B.EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND  B.EFFECTIVETOTIMEKEY>=@TIMEKEY

                  UPDATE AdhocACL_ChangeDetails SET EffectiveToTimeKey=@TIMEKEY  where  EFFECTIVEFROMTIMEKEY<=@TIMEKEY AND EFFECTIVETOTIMEKEY>=@TIMEKEY

/* END OF ADHOC CHAMGE */

/*  CHNAGES FOR MOC ACL MANUAL EFFECT IN NORMAL PROCESSING */
      
      /* MOC TYPE AUTO EFFECT REQUIRED ONLY ONCE FOR DAILY NORMAL PROCESS  */
      UPDATE A
            SET A.EffectiveToTimeKey =@TIMEKEY
      FROM MOC_ChangeDetails A
      WHERE A.EffectiveFromTimeKey<=@TIMEKEY AND a.EffectiveToTimeKey >=@TIMEKEY
                  AND A.MOCTYPE='AUTO'

      DROP TABLE IF EXISTS #MOC_DATA
            SELECT UcifEntityID
                        ,MAX(AssetClassAlt_Key) SysAssetClassAlt_Key
                        ,MIN(Npa_date) SysNPA_Dt  
                        ,'Manual' MOCTYPE
                  INTO #MOC_DATA
            FROM MOC_ChangeDetails A
                  INNER JOIN PRO.ACCOUNTCAL B
                        ON A.CustomerEntityID=b.CustomerEntityID
            WHERE A.EffectiveFromTimeKey<=@TIMEKEY AND a.EffectiveToTimeKey >=@TIMEKEY
                  AND (MOC_ExpireDate>=@ProcessingDate) 
                  AND MOCType_Flag='CUST'
                  ----AND ISNULL(AssetClassAlt_Key,0)>0
                  and a.MOCTYPE ='Manual'
            GROUP BY UcifEntityID

            insert into #MOC_DATA
            SELECT UcifEntityID
                        ,MAX(AssetClassAlt_Key) SysAssetClassAlt_Key
                        ,MIN(Npa_date) SysNPA_Dt 
                        ,'Auto' MOCTYPE
            FROM MOC_ChangeDetails A
                  INNER JOIN PRO.ACCOUNTCAL B
                        ON A.CustomerEntityID=b.CustomerEntityID
            WHERE A.EffectiveFromTimeKey<=@Timekey AND a.EffectiveToTimeKey >=@Timekey
                  AND MOCType_Flag='CUST'
                  ----AND ISNULL(AssetClassAlt_Key,0)>0
                  and a.MOCTYPE ='Auto'
                  and b.UcifEntityID not in(select UcifEntityID from #MOC_DATA)
            GROUP BY UcifEntityID



            UPDATE A
                  SET A.Asset_Norm=CASE WHEN B.SysAssetClassAlt_Key=1 THEN 'ALWYS_STD'
                                                 ELSE 'ALWYS_NPA' END
                        ,MOCTYPE=b.MOCTYPE
                        ,SysAssetClassAlt_Key=isnull(B.SysAssetClassAlt_Key,a.SrcAssetClassAlt_Key)
                        ,SysNPA_Dt=(CASE WHEN isnull(B.SysAssetClassAlt_Key,a.SrcAssetClassAlt_Key) = 1 THEN  NULL ELSE isnull(B.SysNPA_Dt,a.SysNPA_Dt) END)
                  
            FROM pro.CustomerCal A
                  INNER JOIN #MOC_DATA  B
                        ON A.UcifEntityID=B.UcifEntityID

            UPDATE A
                  SET A.Asset_Norm=CASE WHEN B.SysAssetClassAlt_Key=1 THEN 'ALWYS_STD'
                                                 ELSE 'ALWYS_NPA' END
                        ,MOCTYPE=b.MOCTYPE
                        ,FinalAssetClassAlt_Key=isnull(B.SysAssetClassAlt_Key,a.FinalAssetClassAlt_Key)
                        ,FinalNpaDt=(CASE WHEN isnull(B.SysAssetClassAlt_Key,a.FinalAssetClassAlt_Key) = 1 THEN NULL ELSE isnull(b.SysNPA_Dt,a.FinalNpaDt) END)
            FROM PRO.ACCOUNTCAL A
                  INNER JOIN #MOC_DATA  B
                        ON A.UcifEntityID=B.UcifEntityID
 
                  

 UPDATE PRO.PROCESSMONITOR SET ENDTIME=GETDATE() ,MODE='COMPLETE' 
 WHERE IdentityKey = (SELECT IDENT_CURRENT('PRO.PROCESSMONITOR')) 
 AND TIMEKEY=@TIMEKEY AND DESCRIPTION='MOC UPDATES AUTO AND MANUAL'

 UPDATE PRO.AccountCAL set LastCrDate = DebitSinceDt where LastCrDate is NULL and DebitSinceDt is not NULL

 UPDATE A
                  SET A.OtherOverDue = A.OverDueAmt
                  ,A.OtherOverDueSinceDt = A.OverDueSinceDt
                  FROM PRO.ACCOUNTCAL A
                  where ProductCode = '236'
       

UPDATE PRO.ACLRUNNINGPROCESSSTATUS 
            SET COMPLETED='Y',ERRORDATE=NULL,ERRORDESCRIPTION=NULL,COUNT=ISNULL(COUNT,0)+1
            WHERE RUNNINGPROCESSNAME='InsertDataforAssetClassficationIBL'

                  Update BANDAUDITSTATUS set CompletedCount=CompletedCount+1 where BandName='ASSET CLASSIFICATION'

END TRY
BEGIN  CATCH

            UPDATE PRO.ACLRUNNINGPROCESSSTATUS 
            SET COMPLETED='N',ERRORDATE=GETDATE(),ERRORDESCRIPTION=ERROR_MESSAGE(),COUNT=ISNULL(COUNT,0)+1
            WHERE RUNNINGPROCESSNAME='InsertDataforAssetClassficationIBL'

END CATCH
END
GO